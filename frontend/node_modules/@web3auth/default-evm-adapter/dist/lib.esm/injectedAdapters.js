import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { CHAIN_NAMESPACES, WalletInitializationError, getChainConfig, normalizeWalletName } from '@web3auth/base';
import { createStore } from 'mipd';
import { InjectedEvmAdapter } from './injectedEvmAdapter.js';

const getInjectedAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  // EIP-6963: multiple injected provider discovery
  const mipd = createStore();
  // We assume that all extensions have emitted by here.
  // TODO: Ideally, we must use reactive listening. We will do that with v9
  const injectedProviders = mipd.getProviders().map(providerDetail => {
    return new InjectedEvmAdapter({
      name: normalizeWalletName(providerDetail.info.name),
      provider: providerDetail.provider,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    });
  });
  return injectedProviders;
};

export { getInjectedAdapters };
