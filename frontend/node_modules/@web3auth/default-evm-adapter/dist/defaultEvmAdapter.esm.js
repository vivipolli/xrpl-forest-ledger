import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, log, WalletLoginError, Web3AuthError, WalletInitializationError, getChainConfig, normalizeWalletName } from '@web3auth/base';
import { WalletConnectV2Adapter } from '@web3auth/wallet-connect-v2-adapter';
import { createStore } from 'mipd';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { BaseEvmAdapter } from '@web3auth/base-evm-adapter';

class InjectedEvmAdapter extends BaseEvmAdapter {
  constructor(options) {
    super(options);
    _defineProperty(this, "adapterNamespace", ADAPTER_NAMESPACES.EIP155);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.EIP155);
    _defineProperty(this, "type", ADAPTER_CATEGORY.EXTERNAL);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "isInjected", true);
    _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
    _defineProperty(this, "injectedProvider", null);
    this.name = options.name;
    this.injectedProvider = options.provider;
  }
  get provider() {
    if (this.status !== ADAPTER_STATUS.NOT_READY && this.injectedProvider) {
      return this.injectedProvider;
    }
    return null;
  }
  set provider(_) {
    throw new Error("Not implemented");
  }
  async init(options = {}) {
    await super.init(options);
    super.checkInitializationRequirements();
    this.status = ADAPTER_STATUS.READY;
    this.emit(ADAPTER_EVENTS.READY, this.name);
    try {
      log.debug(`initializing ${this.name} injected adapter`);
      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      this.emit(ADAPTER_EVENTS.ERRORED, error);
    }
  }
  async connect() {
    super.checkConnectionRequirements();
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    if (!this.chainConfig) throw WalletLoginError.connectionError("Chain config is not available");
    this.status = ADAPTER_STATUS.CONNECTING;
    this.emit(ADAPTER_EVENTS.CONNECTING, {
      adapter: this.name
    });
    try {
      await this.injectedProvider.request({
        method: "eth_requestAccounts"
      });
      // switch chain if not connected to the right chain
      if (this.injectedProvider.chainId !== this.chainConfig.chainId) {
        try {
          await this.switchChain(this.chainConfig, true);
        } catch (error) {
          await this.addChain(this.chainConfig, true);
          await this.switchChain(this.chainConfig, true);
        }
      }
      this.status = ADAPTER_STATUS.CONNECTED;
      const accountDisconnectHandler = accounts => {
        if (accounts.length === 0) {
          var _this$injectedProvide;
          this.disconnect();
          if ((_this$injectedProvide = this.injectedProvider) !== null && _this$injectedProvide !== void 0 && _this$injectedProvide.removeListener) this.injectedProvider.removeListener("accountsChanged", accountDisconnectHandler);
        }
      };
      this.injectedProvider.on("accountsChanged", accountDisconnectHandler);
      this.emit(ADAPTER_EVENTS.CONNECTED, {
        adapter: this.name,
        reconnected: this.rehydrated,
        provider: this.injectedProvider
      });
      return this.injectedProvider;
    } catch (error) {
      // ready again to be connected
      this.status = ADAPTER_STATUS.READY;
      this.rehydrated = false;
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      if (error instanceof Web3AuthError) throw error;
      throw WalletLoginError.connectionError(`Failed to login with ${this.name} injected wallet`);
    }
  }
  async disconnect(options = {
    cleanup: false
  }) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    await super.disconnectSession();
    if (typeof this.injectedProvider.removeAllListeners !== "undefined") this.injectedProvider.removeAllListeners();
    try {
      await this.injectedProvider.request({
        method: "wallet_revokePermissions",
        params: [{
          eth_accounts: {}
        }]
      });
    } catch (error) {}
    if (options.cleanup) {
      this.status = ADAPTER_STATUS.NOT_READY;
      this.injectedProvider = null;
    } else {
      // ready to be connected again
      this.status = ADAPTER_STATUS.READY;
    }
    await super.disconnect();
  }
  async getUserInfo() {
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async addChain(chainConfig, init = false) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    super.checkAddChainRequirements(chainConfig, init);
    await this.injectedProvider.request({
      method: "wallet_addEthereumChain",
      params: [{
        chainId: chainConfig.chainId,
        chainName: chainConfig.displayName,
        rpcUrls: [chainConfig.rpcTarget],
        blockExplorerUrls: [chainConfig.blockExplorerUrl],
        nativeCurrency: {
          name: chainConfig.tickerName,
          symbol: chainConfig.ticker,
          decimals: chainConfig.decimals || 18
        },
        iconUrls: [chainConfig.logo]
      }]
    });
    this.addChainConfig(chainConfig);
  }
  async switchChain(params, init = false) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    super.checkSwitchChainRequirements(params, init);
    await this.injectedProvider.request({
      method: "wallet_switchEthereumChain",
      params: [{
        chainId: params.chainId
      }]
    });
    this.setAdapterSettings({
      chainConfig: this.getChainConfig(params.chainId)
    });
  }
  async enableMFA() {
    throw new Error("Method Not implemented");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
}

const getInjectedAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  // EIP-6963: multiple injected provider discovery
  const mipd = createStore();
  // We assume that all extensions have emitted by here.
  // TODO: Ideally, we must use reactive listening. We will do that with v9
  const injectedProviders = mipd.getProviders().map(providerDetail => {
    return new InjectedEvmAdapter({
      name: normalizeWalletName(providerDetail.info.name),
      provider: providerDetail.provider,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    });
  });
  return injectedProviders;
};

const getDefaultExternalAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  const wcv2Adapter = new WalletConnectV2Adapter({
    chainConfig: finalChainConfig,
    clientId,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey,
    adapterSettings: {
      walletConnectInitOptions: {}
    }
  });
  const injectedProviders = getInjectedAdapters({
    options
  });
  return [...injectedProviders, wcv2Adapter];
};

export { getDefaultExternalAdapters, getInjectedAdapters };
