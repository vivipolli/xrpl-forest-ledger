/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  getDefaultExternalAdapters: () => (/* binding */ getDefaultExternalAdapters),
  getInjectedAdapters: () => (/* reexport */ getInjectedAdapters)
});

;// external "@babel/runtime/helpers/objectSpread2"
const objectSpread2_namespaceObject = require("@babel/runtime/helpers/objectSpread2");
var objectSpread2_default = /*#__PURE__*/__webpack_require__.n(objectSpread2_namespaceObject);
;// external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// external "@web3auth/wallet-connect-v2-adapter"
const wallet_connect_v2_adapter_namespaceObject = require("@web3auth/wallet-connect-v2-adapter");
;// external "@solana/wallet-standard-features"
const wallet_standard_features_namespaceObject = require("@solana/wallet-standard-features");
;// external "@wallet-standard/app"
const app_namespaceObject = require("@wallet-standard/app");
;// external "@wallet-standard/features"
const features_namespaceObject = require("@wallet-standard/features");
;// external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// external "@web3auth/base-solana-adapter"
const base_solana_adapter_namespaceObject = require("@web3auth/base-solana-adapter");
;// external "@web3auth/solana-provider"
const solana_provider_namespaceObject = require("@web3auth/solana-provider");
;// ./src/utils.ts
const getSolanaChainByChainConfig = chainConfig => {
  switch (chainConfig.chainId) {
    case "0x65":
      return "solana:mainnet";
    case "0x66":
      return "solana:testnet";
    case "0x67":
      return "solana:devnet";
    default:
      return null;
  }
};
;// external "@solana/web3.js"
const web3_js_namespaceObject = require("@solana/web3.js");
;// external "@web3auth/auth"
const auth_namespaceObject = require("@web3auth/auth");
;// external "bn.js"
const external_bn_js_namespaceObject = require("bn.js");
var external_bn_js_default = /*#__PURE__*/__webpack_require__.n(external_bn_js_namespaceObject);
;// ./src/walletStandardHandler.ts






class WalletStandardProviderHandler extends auth_namespaceObject.SafeEventEmitter {
  constructor({
    wallet,
    getCurrentChain
  }) {
    super();
    defineProperty_default()(this, "wallet", null);
    defineProperty_default()(this, "getCurrentChain", void 0);
    this.wallet = wallet;
    this.getCurrentChain = getCurrentChain;
  }
  get currentAccount() {
    var _this$wallet;
    const account = (_this$wallet = this.wallet) === null || _this$wallet === void 0 ? void 0 : _this$wallet.accounts[0];
    if (!account) throw base_namespaceObject.WalletLoginError.notConnectedError();
    return account;
  }
  get publicKey() {
    return new web3_js_namespaceObject.PublicKey(this.currentAccount.publicKey);
  }
  async signMessage(message) {
    const account = this.currentAccount;
    const signature = await this.wallet.features[wallet_standard_features_namespaceObject.SolanaSignMessage].signMessage({
      account,
      message
    });
    return {
      signature: signature[0].signature,
      publicKey: new (external_bn_js_default())(Buffer.from(account.publicKey))
    };
  }
  async signTransaction(transaction) {
    const account = this.currentAccount;
    const output = await this.wallet.features[wallet_standard_features_namespaceObject.SolanaSignTransaction].signTransaction({
      account,
      transaction: transaction.serialize({
        requireAllSignatures: false
      }),
      chain: this.getCurrentChain()
    });
    const isVersionedTransaction = transaction.version !== undefined || transaction instanceof web3_js_namespaceObject.VersionedTransaction;
    if (isVersionedTransaction) {
      return web3_js_namespaceObject.VersionedTransaction.deserialize(output[0].signedTransaction);
    }
    return web3_js_namespaceObject.Transaction.from(output[0].signedTransaction);
  }
  async signAllTransactions(transactions) {
    return Promise.all(transactions.map(transaction => this.signTransaction(transaction)));
  }
  async signAndSendTransaction(transaction) {
    const account = this.currentAccount;
    const output = await this.wallet.features[wallet_standard_features_namespaceObject.SolanaSignAndSendTransaction].signAndSendTransaction({
      account,
      transaction: transaction.serialize({
        requireAllSignatures: false
      }),
      chain: this.getCurrentChain()
    });
    const [{
      signature
    }] = output;
    return {
      signature: new TextDecoder().decode(signature)
    };
  }
}
;// ./src/walletStandardAdapter.ts







class WalletStandardAdapter extends base_solana_adapter_namespaceObject.BaseSolanaAdapter {
  constructor(options) {
    super(options);
    defineProperty_default()(this, "name", void 0);
    defineProperty_default()(this, "adapterNamespace", base_namespaceObject.ADAPTER_NAMESPACES.SOLANA);
    defineProperty_default()(this, "currentChainNamespace", base_namespaceObject.CHAIN_NAMESPACES.SOLANA);
    defineProperty_default()(this, "type", base_namespaceObject.ADAPTER_CATEGORY.EXTERNAL);
    defineProperty_default()(this, "isInjected", true);
    defineProperty_default()(this, "status", base_namespaceObject.ADAPTER_STATUS.NOT_READY);
    defineProperty_default()(this, "wallet", null);
    defineProperty_default()(this, "injectedProvider", null);
    this.name = options.name;
    // in VueJS, for some wallets e.g. Gate, Solflare, when connecting it throws error "attempted to get private field on non-instance"
    // it seems that Vue create a Proxy object for the wallet object which causes the issue
    // ref: https://stackoverflow.com/questions/64917686/vue-array-converted-to-proxy-object
    this.wallet = ["gate", "solflare"].includes(this.name) ? Object.freeze(options.wallet) : options.wallet;
  }
  get provider() {
    if (this.status !== base_namespaceObject.ADAPTER_STATUS.NOT_READY && this.injectedProvider) {
      return this.injectedProvider;
    }
    return null;
  }
  get isWalletConnected() {
    return !!(this.status === base_namespaceObject.ADAPTER_STATUS.CONNECTED && this.wallet.accounts.length > 0);
  }
  async init(options = {}) {
    await super.init(options);
    super.checkInitializationRequirements();
    this.injectedProvider = new solana_provider_namespaceObject.WalletStandardProvider({
      config: {
        chainConfig: this.chainConfig
      }
    });
    const providerHandler = new WalletStandardProviderHandler({
      wallet: this.wallet,
      getCurrentChain: () => getSolanaChainByChainConfig(this.chainConfig)
    });
    this.injectedProvider.setupProvider(providerHandler);
    this.status = base_namespaceObject.ADAPTER_STATUS.READY;
    this.emit(base_namespaceObject.ADAPTER_EVENTS.READY, this.name);
    try {
      base_namespaceObject.log.debug("initializing solana injected adapter");
      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      base_namespaceObject.log.error("Failed to connect with cached solana injected provider", error);
      this.emit(base_namespaceObject.ADAPTER_EVENTS.ERRORED, error);
    }
  }
  async connect() {
    try {
      super.checkConnectionRequirements();
      this.status = base_namespaceObject.ADAPTER_STATUS.CONNECTING;
      this.emit(base_namespaceObject.ADAPTER_EVENTS.CONNECTING, {
        adapter: this.name
      });
      const chainName = getSolanaChainByChainConfig(this.chainConfig);
      if (!this.wallet.chains.find(chain => chain === chainName)) throw base_namespaceObject.WalletLoginError.connectionError(`Chain ${chainName} not supported. Supported chains are ${this.wallet.chains.join(", ")}`);
      if (!this.isWalletConnected) {
        await this.wallet.features[features_namespaceObject.StandardConnect].connect();
      }
      if (this.wallet.accounts.length === 0) throw base_namespaceObject.WalletLoginError.connectionError();
      this.status = base_namespaceObject.ADAPTER_STATUS.CONNECTED;
      this.emit(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, {
        adapter: this.name,
        reconnected: this.rehydrated,
        provider: this.provider
      });
      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = base_namespaceObject.ADAPTER_STATUS.READY;
      this.rehydrated = false;
      this.emit(base_namespaceObject.ADAPTER_EVENTS.ERRORED, error);
      throw error;
    }
  }
  async disconnect(options = {
    cleanup: false
  }) {
    await super.disconnectSession();
    try {
      var _this$wallet$features;
      await ((_this$wallet$features = this.wallet.features[features_namespaceObject.StandardDisconnect]) === null || _this$wallet$features === void 0 ? void 0 : _this$wallet$features.disconnect());
      if (options.cleanup) {
        this.status = base_namespaceObject.ADAPTER_STATUS.NOT_READY;
        this.injectedProvider = null;
      } else {
        this.status = base_namespaceObject.ADAPTER_STATUS.READY;
      }
      await super.disconnect();
    } catch (error) {
      this.emit(base_namespaceObject.ADAPTER_EVENTS.ERRORED, base_namespaceObject.WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));
    }
  }
  async getUserInfo() {
    if (!this.isWalletConnected) throw base_namespaceObject.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async addChain(chainConfig, init = false) {
    var _this$injectedProvide;
    super.checkAddChainRequirements(chainConfig, init);
    (_this$injectedProvide = this.injectedProvider) === null || _this$injectedProvide === void 0 || _this$injectedProvide.addChain(chainConfig);
    this.addChainConfig(chainConfig);
  }
  async switchChain(params, init = false) {
    var _this$injectedProvide2;
    super.checkSwitchChainRequirements(params, init);
    await ((_this$injectedProvide2 = this.injectedProvider) === null || _this$injectedProvide2 === void 0 ? void 0 : _this$injectedProvide2.switchChain(params));
    this.setAdapterSettings({
      chainConfig: this.getChainConfig(params.chainId)
    });
  }
  async enableMFA() {
    throw new Error("Method not implemented.");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
}
;// ./src/injectedAdapters.ts






const getInjectedAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(base_namespaceObject.CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw base_namespaceObject.WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = objectSpread2_default()(objectSpread2_default()({}, (0,base_namespaceObject.getChainConfig)(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});

  // get installed wallets that support standard wallet
  const standardWalletAdapters = [];
  const wallets = (0,app_namespaceObject.getWallets)().get();
  wallets.forEach(wallet => {
    const {
      name,
      chains,
      features
    } = wallet;
    const isSolana = chains.some(chain => chain.startsWith("solana"));
    if (!isSolana) return;
    const hasRequiredFeatures = [features_namespaceObject.StandardConnect, wallet_standard_features_namespaceObject.SolanaSignMessage, wallet_standard_features_namespaceObject.SolanaSignTransaction, wallet_standard_features_namespaceObject.SolanaSignAndSendTransaction].every(feature => Object.keys(features).includes(feature));
    if (!hasRequiredFeatures) return;
    standardWalletAdapters.push(new WalletStandardAdapter({
      name: (0,base_namespaceObject.normalizeWalletName)(name),
      wallet,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    }));
  });
  return standardWalletAdapters;
};
;// ./src/index.ts




const getDefaultExternalAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(base_namespaceObject.CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw base_namespaceObject.WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = objectSpread2_default()(objectSpread2_default()({}, (0,base_namespaceObject.getChainConfig)(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  const wcv2Adapter = new wallet_connect_v2_adapter_namespaceObject.WalletConnectV2Adapter({
    chainConfig: finalChainConfig,
    clientId,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey,
    adapterSettings: {
      walletConnectInitOptions: {}
    }
  });
  const injectedProviders = getInjectedAdapters({
    options
  });
  return [...injectedProviders, wcv2Adapter];
};

module.exports = __webpack_exports__;
/******/ })()
;