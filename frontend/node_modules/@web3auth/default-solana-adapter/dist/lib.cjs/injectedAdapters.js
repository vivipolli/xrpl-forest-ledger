'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var walletStandardFeatures = require('@solana/wallet-standard-features');
var app = require('@wallet-standard/app');
var features = require('@wallet-standard/features');
var base = require('@web3auth/base');
var walletStandardAdapter = require('./walletStandardAdapter.js');

const getInjectedAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(base.CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw base.WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, base.getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});

  // get installed wallets that support standard wallet
  const standardWalletAdapters = [];
  const wallets = app.getWallets().get();
  wallets.forEach(wallet => {
    const {
      name,
      chains,
      features: features$1
    } = wallet;
    const isSolana = chains.some(chain => chain.startsWith("solana"));
    if (!isSolana) return;
    const hasRequiredFeatures = [features.StandardConnect, walletStandardFeatures.SolanaSignMessage, walletStandardFeatures.SolanaSignTransaction, walletStandardFeatures.SolanaSignAndSendTransaction].every(feature => Object.keys(features$1).includes(feature));
    if (!hasRequiredFeatures) return;
    standardWalletAdapters.push(new walletStandardAdapter.WalletStandardAdapter({
      name: base.normalizeWalletName(name),
      wallet,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    }));
  });
  return standardWalletAdapters;
};

exports.getInjectedAdapters = getInjectedAdapters;
