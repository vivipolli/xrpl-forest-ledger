'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var base = require('@web3auth/base');
var walletConnectV2Adapter = require('@web3auth/wallet-connect-v2-adapter');
var injectedAdapters = require('./injectedAdapters.js');

const getDefaultExternalAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(base.CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw base.WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, base.getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  const wcv2Adapter = new walletConnectV2Adapter.WalletConnectV2Adapter({
    chainConfig: finalChainConfig,
    clientId,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey,
    adapterSettings: {
      walletConnectInitOptions: {}
    }
  });
  const injectedProviders = injectedAdapters.getInjectedAdapters({
    options
  });
  return [...injectedProviders, wcv2Adapter];
};

exports.getInjectedAdapters = injectedAdapters.getInjectedAdapters;
exports.getDefaultExternalAdapters = getDefaultExternalAdapters;
