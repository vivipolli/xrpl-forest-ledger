import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { WalletLoginError, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, log, WalletInitializationError, getChainConfig, normalizeWalletName } from '@web3auth/base';
import { WalletConnectV2Adapter } from '@web3auth/wallet-connect-v2-adapter';
import { SolanaSignMessage, SolanaSignTransaction, SolanaSignAndSendTransaction } from '@solana/wallet-standard-features';
import { getWallets } from '@wallet-standard/app';
import { StandardConnect, StandardDisconnect } from '@wallet-standard/features';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';
import { WalletStandardProvider } from '@web3auth/solana-provider';
import { PublicKey, VersionedTransaction, Transaction } from '@solana/web3.js';
import { SafeEventEmitter } from '@web3auth/auth';
import BN from 'bn.js';

const getSolanaChainByChainConfig = chainConfig => {
  switch (chainConfig.chainId) {
    case "0x65":
      return "solana:mainnet";
    case "0x66":
      return "solana:testnet";
    case "0x67":
      return "solana:devnet";
    default:
      return null;
  }
};

class WalletStandardProviderHandler extends SafeEventEmitter {
  constructor({
    wallet,
    getCurrentChain
  }) {
    super();
    _defineProperty(this, "wallet", null);
    _defineProperty(this, "getCurrentChain", void 0);
    this.wallet = wallet;
    this.getCurrentChain = getCurrentChain;
  }
  get currentAccount() {
    var _this$wallet;
    const account = (_this$wallet = this.wallet) === null || _this$wallet === void 0 ? void 0 : _this$wallet.accounts[0];
    if (!account) throw WalletLoginError.notConnectedError();
    return account;
  }
  get publicKey() {
    return new PublicKey(this.currentAccount.publicKey);
  }
  async signMessage(message) {
    const account = this.currentAccount;
    const signature = await this.wallet.features[SolanaSignMessage].signMessage({
      account,
      message
    });
    return {
      signature: signature[0].signature,
      publicKey: new BN(Buffer.from(account.publicKey))
    };
  }
  async signTransaction(transaction) {
    const account = this.currentAccount;
    const output = await this.wallet.features[SolanaSignTransaction].signTransaction({
      account,
      transaction: transaction.serialize({
        requireAllSignatures: false
      }),
      chain: this.getCurrentChain()
    });
    const isVersionedTransaction = transaction.version !== undefined || transaction instanceof VersionedTransaction;
    if (isVersionedTransaction) {
      return VersionedTransaction.deserialize(output[0].signedTransaction);
    }
    return Transaction.from(output[0].signedTransaction);
  }
  async signAllTransactions(transactions) {
    return Promise.all(transactions.map(transaction => this.signTransaction(transaction)));
  }
  async signAndSendTransaction(transaction) {
    const account = this.currentAccount;
    const output = await this.wallet.features[SolanaSignAndSendTransaction].signAndSendTransaction({
      account,
      transaction: transaction.serialize({
        requireAllSignatures: false
      }),
      chain: this.getCurrentChain()
    });
    const [{
      signature
    }] = output;
    return {
      signature: new TextDecoder().decode(signature)
    };
  }
}

class WalletStandardAdapter extends BaseSolanaAdapter {
  constructor(options) {
    super(options);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "adapterNamespace", ADAPTER_NAMESPACES.SOLANA);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.SOLANA);
    _defineProperty(this, "type", ADAPTER_CATEGORY.EXTERNAL);
    _defineProperty(this, "isInjected", true);
    _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
    _defineProperty(this, "wallet", null);
    _defineProperty(this, "injectedProvider", null);
    this.name = options.name;
    // in VueJS, for some wallets e.g. Gate, Solflare, when connecting it throws error "attempted to get private field on non-instance"
    // it seems that Vue create a Proxy object for the wallet object which causes the issue
    // ref: https://stackoverflow.com/questions/64917686/vue-array-converted-to-proxy-object
    this.wallet = ["gate", "solflare"].includes(this.name) ? Object.freeze(options.wallet) : options.wallet;
  }
  get provider() {
    if (this.status !== ADAPTER_STATUS.NOT_READY && this.injectedProvider) {
      return this.injectedProvider;
    }
    return null;
  }
  get isWalletConnected() {
    return !!(this.status === ADAPTER_STATUS.CONNECTED && this.wallet.accounts.length > 0);
  }
  async init(options = {}) {
    await super.init(options);
    super.checkInitializationRequirements();
    this.injectedProvider = new WalletStandardProvider({
      config: {
        chainConfig: this.chainConfig
      }
    });
    const providerHandler = new WalletStandardProviderHandler({
      wallet: this.wallet,
      getCurrentChain: () => getSolanaChainByChainConfig(this.chainConfig)
    });
    this.injectedProvider.setupProvider(providerHandler);
    this.status = ADAPTER_STATUS.READY;
    this.emit(ADAPTER_EVENTS.READY, this.name);
    try {
      log.debug("initializing solana injected adapter");
      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      log.error("Failed to connect with cached solana injected provider", error);
      this.emit(ADAPTER_EVENTS.ERRORED, error);
    }
  }
  async connect() {
    try {
      super.checkConnectionRequirements();
      this.status = ADAPTER_STATUS.CONNECTING;
      this.emit(ADAPTER_EVENTS.CONNECTING, {
        adapter: this.name
      });
      const chainName = getSolanaChainByChainConfig(this.chainConfig);
      if (!this.wallet.chains.find(chain => chain === chainName)) throw WalletLoginError.connectionError(`Chain ${chainName} not supported. Supported chains are ${this.wallet.chains.join(", ")}`);
      if (!this.isWalletConnected) {
        await this.wallet.features[StandardConnect].connect();
      }
      if (this.wallet.accounts.length === 0) throw WalletLoginError.connectionError();
      this.status = ADAPTER_STATUS.CONNECTED;
      this.emit(ADAPTER_EVENTS.CONNECTED, {
        adapter: this.name,
        reconnected: this.rehydrated,
        provider: this.provider
      });
      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = ADAPTER_STATUS.READY;
      this.rehydrated = false;
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      throw error;
    }
  }
  async disconnect(options = {
    cleanup: false
  }) {
    await super.disconnectSession();
    try {
      var _this$wallet$features;
      await ((_this$wallet$features = this.wallet.features[StandardDisconnect]) === null || _this$wallet$features === void 0 ? void 0 : _this$wallet$features.disconnect());
      if (options.cleanup) {
        this.status = ADAPTER_STATUS.NOT_READY;
        this.injectedProvider = null;
      } else {
        this.status = ADAPTER_STATUS.READY;
      }
      await super.disconnect();
    } catch (error) {
      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));
    }
  }
  async getUserInfo() {
    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async addChain(chainConfig, init = false) {
    var _this$injectedProvide;
    super.checkAddChainRequirements(chainConfig, init);
    (_this$injectedProvide = this.injectedProvider) === null || _this$injectedProvide === void 0 || _this$injectedProvide.addChain(chainConfig);
    this.addChainConfig(chainConfig);
  }
  async switchChain(params, init = false) {
    var _this$injectedProvide2;
    super.checkSwitchChainRequirements(params, init);
    await ((_this$injectedProvide2 = this.injectedProvider) === null || _this$injectedProvide2 === void 0 ? void 0 : _this$injectedProvide2.switchChain(params));
    this.setAdapterSettings({
      chainConfig: this.getChainConfig(params.chainId)
    });
  }
  async enableMFA() {
    throw new Error("Method not implemented.");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
}

const getInjectedAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});

  // get installed wallets that support standard wallet
  const standardWalletAdapters = [];
  const wallets = getWallets().get();
  wallets.forEach(wallet => {
    const {
      name,
      chains,
      features
    } = wallet;
    const isSolana = chains.some(chain => chain.startsWith("solana"));
    if (!isSolana) return;
    const hasRequiredFeatures = [StandardConnect, SolanaSignMessage, SolanaSignTransaction, SolanaSignAndSendTransaction].every(feature => Object.keys(features).includes(feature));
    if (!hasRequiredFeatures) return;
    standardWalletAdapters.push(new WalletStandardAdapter({
      name: normalizeWalletName(name),
      wallet,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    }));
  });
  return standardWalletAdapters;
};

const getDefaultExternalAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  const wcv2Adapter = new WalletConnectV2Adapter({
    chainConfig: finalChainConfig,
    clientId,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey,
    adapterSettings: {
      walletConnectInitOptions: {}
    }
  });
  const injectedProviders = getInjectedAdapters({
    options
  });
  return [...injectedProviders, wcv2Adapter];
};

export { getDefaultExternalAdapters, getInjectedAdapters };
