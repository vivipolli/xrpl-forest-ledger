import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { SolanaSignMessage, SolanaSignTransaction, SolanaSignAndSendTransaction } from '@solana/wallet-standard-features';
import { getWallets } from '@wallet-standard/app';
import { StandardConnect } from '@wallet-standard/features';
import { CHAIN_NAMESPACES, WalletInitializationError, getChainConfig, normalizeWalletName } from '@web3auth/base';
import { WalletStandardAdapter } from './walletStandardAdapter.js';

const getInjectedAdapters = params => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread(_objectSpread({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});

  // get installed wallets that support standard wallet
  const standardWalletAdapters = [];
  const wallets = getWallets().get();
  wallets.forEach(wallet => {
    const {
      name,
      chains,
      features
    } = wallet;
    const isSolana = chains.some(chain => chain.startsWith("solana"));
    if (!isSolana) return;
    const hasRequiredFeatures = [StandardConnect, SolanaSignMessage, SolanaSignTransaction, SolanaSignAndSendTransaction].every(feature => Object.keys(features).includes(feature));
    if (!hasRequiredFeatures) return;
    standardWalletAdapters.push(new WalletStandardAdapter({
      name: normalizeWalletName(name),
      wallet,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    }));
  });
  return standardWalletAdapters;
};

export { getInjectedAdapters };
