import { type SolanaSignAndSendTransactionFeature, type SolanaSignMessageFeature, type SolanaSignTransactionFeature } from "@solana/wallet-standard-features";
import { PublicKey } from "@solana/web3.js";
import { IdentifierString, type WalletWithFeatures } from "@wallet-standard/base";
import { type StandardConnectFeature, type StandardDisconnectFeature, type StandardEventsFeature } from "@wallet-standard/features";
import { SafeEventEmitter } from "@web3auth/auth";
import { IWalletStandardProviderHandler, TransactionOrVersionedTransaction } from "@web3auth/solana-provider";
import BN from "bn.js";
export type WalletStandard = WalletWithFeatures<StandardConnectFeature & StandardEventsFeature & StandardDisconnectFeature & SolanaSignAndSendTransactionFeature & SolanaSignMessageFeature & SolanaSignTransactionFeature>;
export declare class WalletStandardProviderHandler extends SafeEventEmitter implements IWalletStandardProviderHandler {
    private wallet;
    private getCurrentChain;
    constructor({ wallet, getCurrentChain }: {
        wallet: WalletStandard;
        getCurrentChain: () => IdentifierString;
    });
    get currentAccount(): import("@wallet-standard/base").WalletAccount;
    get publicKey(): PublicKey;
    signMessage(message: Uint8Array): Promise<{
        signature: Uint8Array;
        publicKey: BN;
    }>;
    signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]>;
    signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{
        signature: string;
    }>;
}
