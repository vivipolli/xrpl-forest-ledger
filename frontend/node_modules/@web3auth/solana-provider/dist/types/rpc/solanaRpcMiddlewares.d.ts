import { JRPCMiddleware, JRPCRequest } from "@web3auth/auth";
import { IChainSwitchHandlers, IProviderHandlers } from "./interfaces";
export declare function createGetAccountsMiddleware({ getAccounts }: {
    getAccounts: IProviderHandlers["getAccounts"];
}): JRPCMiddleware<unknown, unknown>;
export declare function createGetPublicKeyMiddleware({ getPublicKey, }: {
    getPublicKey: IProviderHandlers["getPublicKey"];
}): JRPCMiddleware<unknown, unknown>;
export declare function createRequestAccountsMiddleware({ requestAccounts, }: {
    requestAccounts: IProviderHandlers["requestAccounts"];
}): JRPCMiddleware<unknown, unknown>;
export declare function createGenericJRPCMiddleware<T, U>(targetMethod: string, handler: (req: JRPCRequest<T>) => Promise<U>): JRPCMiddleware<T, U>;
export declare function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown>;
export declare function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown>;
export interface IAccountHandlers {
    updatePrivatekey: (req: JRPCRequest<{
        privateKey: string;
    }>) => Promise<void>;
}
export declare function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown>;
