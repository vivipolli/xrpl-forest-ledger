'use strict';

var auth = require('@web3auth/auth');

const getTorusHandlers = injectedProvider => {
  const providerHandlers = {
    requestAccounts: async () => {
      const accounts = await injectedProvider.request({
        method: "solana_requestAccounts",
        params: {}
      });
      return accounts;
    },
    getPublicKey: async () => {
      const publicKeys = await injectedProvider.request({
        method: "solana_requestAccounts",
        params: {}
      });
      return publicKeys[0];
    },
    getAccounts: async () => {
      const accounts = await injectedProvider.request({
        method: "solana_requestAccounts",
        params: {}
      });
      return accounts;
    },
    getPrivateKey: async () => {
      throw auth.rpcErrors.methodNotSupported();
    },
    getSecretKey: async () => {
      throw auth.rpcErrors.methodNotSupported();
    },
    signMessage: async req => {
      var _req$params;
      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {
        throw auth.rpcErrors.invalidParams("message");
      }
      const message = await injectedProvider.signMessage(req.params.message);
      return message;
    },
    signTransaction: async req => {
      var _req$params2;
      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {
        throw auth.rpcErrors.invalidParams("message");
      }
      const txMessage = req.params.message;
      const response = await injectedProvider.signTransaction(txMessage);
      return response;
    },
    signAndSendTransaction: async req => {
      var _req$params3;
      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {
        throw auth.rpcErrors.invalidParams("message");
      }
      const txMessage = req.params.message;
      const response = await injectedProvider.sendTransaction(txMessage);
      return {
        signature: response
      };
    },
    signAllTransactions: async req => {
      var _req$params4, _req$params5;
      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {
        throw auth.rpcErrors.invalidParams("message");
      }
      const transactions = req.params.message;
      const response = await injectedProvider.signAllTransactions(transactions);
      return response;
    }
  };
  return providerHandlers;
};

exports.getTorusHandlers = getTorusHandlers;
