'use strict';

var auth = require('@web3auth/auth');

function createGetAccountsMiddleware({
  getAccounts
}) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== "getAccounts") return next();
    if (!getAccounts) throw new Error("WalletMiddleware - opts.getAccounts not provided");
    // This calls from the prefs controller
    const accounts = await getAccounts(request);
    response.result = accounts;
    return undefined;
  });
}
function createGetPublicKeyMiddleware({
  getPublicKey
}) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== "getPublicKey") return next();
    if (!getPublicKey) throw new Error("WalletMiddleware - opts.getPublicKey not provided");
    const publicKey = await getPublicKey(request);
    response.result = publicKey;
    return undefined;
  });
}
function createRequestAccountsMiddleware({
  requestAccounts
}) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== "requestAccounts") return next();
    if (!requestAccounts) throw new Error("WalletMiddleware - opts.requestAccounts not provided");
    // This calls the UI login function
    const accounts = await requestAccounts(request);
    response.result = accounts;
    return undefined;
  });
}
function createGenericJRPCMiddleware(targetMethod, handler) {
  return auth.createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== targetMethod) return next();
    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);
    const result = await handler(request);
    response.result = result;
    return undefined;
  });
}
function createSolanaMiddleware(providerHandlers) {
  const {
    getAccounts,
    requestAccounts,
    signTransaction,
    signAndSendTransaction,
    signAllTransactions,
    signMessage,
    getPrivateKey,
    getSecretKey,
    getPublicKey
  } = providerHandlers;
  return auth.mergeMiddleware([createRequestAccountsMiddleware({
    requestAccounts
  }), createGetAccountsMiddleware({
    getAccounts
  }), createGenericJRPCMiddleware("signTransaction", signTransaction), createGenericJRPCMiddleware("signAndSendTransaction", signAndSendTransaction), createGenericJRPCMiddleware("signAllTransactions", signAllTransactions), createGenericJRPCMiddleware("signMessage", signMessage), createGenericJRPCMiddleware("solanaPrivateKey", getPrivateKey), createGenericJRPCMiddleware("private_key", getPrivateKey), createGenericJRPCMiddleware("public_key", getPublicKey), createGenericJRPCMiddleware("solanaPublicKey", getPublicKey), createGenericJRPCMiddleware("solanaSecretKey", getSecretKey)]);
}
function createChainSwitchMiddleware({
  addNewChainConfig,
  switchSolanaChain
}) {
  return auth.mergeMiddleware([createGenericJRPCMiddleware("addSolanaChain", addNewChainConfig), createGenericJRPCMiddleware("switchSolanaChain", switchSolanaChain)]);
}
function createAccountMiddleware({
  updatePrivatekey
}) {
  return auth.mergeMiddleware([createGenericJRPCMiddleware("updateAccount", updatePrivatekey)]);
}

exports.createAccountMiddleware = createAccountMiddleware;
exports.createChainSwitchMiddleware = createChainSwitchMiddleware;
exports.createGenericJRPCMiddleware = createGenericJRPCMiddleware;
exports.createGetAccountsMiddleware = createGetAccountsMiddleware;
exports.createGetPublicKeyMiddleware = createGetPublicKeyMiddleware;
exports.createRequestAccountsMiddleware = createRequestAccountsMiddleware;
exports.createSolanaMiddleware = createSolanaMiddleware;
