'use strict';

var auth = require('@web3auth/auth');
var walletMidddleware = require('./walletMidddleware.js');

function createEthMiddleware(providerHandlers) {
  const {
    getAccounts,
    getPrivateKey,
    getPublicKey,
    processTransaction,
    processSignTransaction,
    processEthSignMessage,
    processTypedMessageV4,
    processPersonalMessage
  } = providerHandlers;
  const ethMiddleware = auth.mergeMiddleware([auth.createScaffoldMiddleware({
    eth_syncing: false
  }), walletMidddleware.createWalletMiddleware({
    getAccounts,
    getPrivateKey,
    getPublicKey,
    processTransaction,
    processEthSignMessage,
    processSignTransaction,
    processTypedMessageV4,
    processPersonalMessage
  })]);
  return ethMiddleware;
}
function createChainSwitchMiddleware({
  addChain,
  switchChain
}) {
  async function addNewChain(req, res) {
    var _req$params;
    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;
    if (!chainParams) throw auth.rpcErrors.invalidParams("Missing chain params");
    if (!chainParams.chainId) throw auth.rpcErrors.invalidParams("Missing chainId in chainParams");
    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw auth.rpcErrors.invalidParams("Missing rpcUrls in chainParams");
    if (!chainParams.nativeCurrency) throw auth.rpcErrors.invalidParams("Missing nativeCurrency in chainParams");
    res.result = await addChain(chainParams);
  }
  async function updateChain(req, res) {
    var _req$params2;
    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;
    if (!chainParams) throw auth.rpcErrors.invalidParams("Missing chainId");
    res.result = await switchChain(chainParams);
  }
  return auth.createScaffoldMiddleware({
    wallet_addEthereumChain: auth.createAsyncMiddleware(addNewChain),
    wallet_switchEthereumChain: auth.createAsyncMiddleware(updateChain)
  });
}

// #region account middlewares
function createAccountMiddleware({
  updatePrivatekey
}) {
  async function updateAccount(req, res) {
    var _req$params3;
    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;
    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw auth.rpcErrors.invalidParams("Missing privateKey");
    res.result = await updatePrivatekey(accountParams);
  }
  return auth.createScaffoldMiddleware({
    wallet_updateAccount: auth.createAsyncMiddleware(updateAccount)
  });
}

// #endregion account middlewares

exports.createAccountMiddleware = createAccountMiddleware;
exports.createChainSwitchMiddleware = createChainSwitchMiddleware;
exports.createEthMiddleware = createEthMiddleware;
