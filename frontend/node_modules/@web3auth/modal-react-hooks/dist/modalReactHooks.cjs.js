/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Web3AuthInnerContext: () => (/* reexport */ Web3AuthInnerContext),
  Web3AuthInnerProvider: () => (/* reexport */ Web3AuthInnerProvider),
  Web3AuthProvider: () => (/* reexport */ Web3AuthProvider),
  useWeb3Auth: () => (/* reexport */ useWeb3Auth)
});

;// external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// external "@web3auth/modal"
const modal_namespaceObject = require("@web3auth/modal");
;// external "react"
const external_react_namespaceObject = require("react");
;// ./src/context/Web3AuthInnerContext.ts



const Web3AuthInnerContext = /*#__PURE__*/(0,external_react_namespaceObject.createContext)(null);
function Web3AuthInnerProvider(params) {
  const {
    children,
    config
  } = params;
  const [web3Auth, setWeb3Auth] = (0,external_react_namespaceObject.useState)(null);
  const [isConnecting, setIsConnecting] = (0,external_react_namespaceObject.useState)(false);
  const [isInitializing, setIsInitializing] = (0,external_react_namespaceObject.useState)(false);
  const [initError, setInitError] = (0,external_react_namespaceObject.useState)(null);
  const [connectError, setConnectError] = (0,external_react_namespaceObject.useState)(null);
  const [isConnected, setIsConnected] = (0,external_react_namespaceObject.useState)(false);
  const [provider, setProvider] = (0,external_react_namespaceObject.useState)(null);
  const [userInfo, setUserInfo] = (0,external_react_namespaceObject.useState)(null);
  const [isMFAEnabled, setIsMFAEnabled] = (0,external_react_namespaceObject.useState)(false);
  const [isInitialized, setIsInitialized] = (0,external_react_namespaceObject.useState)(false);
  const [status, setStatus] = (0,external_react_namespaceObject.useState)(null);
  const addPlugin = (0,external_react_namespaceObject.useCallback)(plugin => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    return web3Auth.addPlugin(plugin);
  }, [web3Auth]);
  const getPlugin = (0,external_react_namespaceObject.useCallback)(name => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    return web3Auth.getPlugin(name);
  }, [web3Auth]);
  const enableMFA = (0,external_react_namespaceObject.useCallback)(async loginParams => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    if (!isConnected) throw base_namespaceObject.WalletLoginError.notConnectedError();
    await web3Auth.enableMFA(loginParams);
    const localUserInfo = await web3Auth.getUserInfo();
    setUserInfo(localUserInfo);
    setIsMFAEnabled(localUserInfo.isMfaEnabled || false);
  }, [web3Auth, isConnected]);
  const manageMFA = (0,external_react_namespaceObject.useCallback)(async loginParams => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    if (!isConnected) throw base_namespaceObject.WalletLoginError.notConnectedError();
    await web3Auth.manageMFA(loginParams);
  }, [web3Auth, isConnected]);
  const logout = (0,external_react_namespaceObject.useCallback)(async (logoutParams = {
    cleanup: false
  }) => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    if (!isConnected) throw base_namespaceObject.WalletLoginError.notConnectedError();
    await web3Auth.logout(logoutParams);
  }, [web3Auth, isConnected]);
  const connect = (0,external_react_namespaceObject.useCallback)(async () => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    try {
      setConnectError(null);
      setIsConnecting(true);
      const localProvider = await web3Auth.connect();
      return localProvider;
    } catch (error) {
      setConnectError(error);
      throw error;
    } finally {
      setIsConnecting(false);
    }
  }, [web3Auth]);
  const addAndSwitchChain = (0,external_react_namespaceObject.useCallback)(async chainConfig => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    await web3Auth.addChain(chainConfig);
    await web3Auth.switchChain({
      chainId: chainConfig.chainId
    });
  }, [web3Auth]);
  const authenticateUser = (0,external_react_namespaceObject.useCallback)(async () => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    return web3Auth.authenticateUser();
  }, [web3Auth]);
  const addChain = (0,external_react_namespaceObject.useCallback)(async chainConfig => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    return web3Auth.addChain(chainConfig);
  }, [web3Auth]);
  const switchChain = (0,external_react_namespaceObject.useCallback)(chainParams => {
    if (!web3Auth) throw base_namespaceObject.WalletInitializationError.notReady();
    return web3Auth.switchChain(chainParams);
  }, [web3Auth]);
  (0,external_react_namespaceObject.useEffect)(() => {
    const resetHookState = () => {
      setProvider(null);
      setUserInfo(null);
      setIsMFAEnabled(false);
      setIsConnected(false);
      setStatus(null);
    };
    resetHookState();
    const {
      web3AuthOptions,
      adapters = [],
      plugins = []
    } = config;
    const web3AuthInstance = new modal_namespaceObject.Web3Auth(web3AuthOptions);
    if (adapters.length) adapters.map(adapter => web3AuthInstance.configureAdapter(adapter));
    if (plugins.length) {
      plugins.forEach(plugin => {
        web3AuthInstance.addPlugin(plugin);
      });
    }
    setWeb3Auth(web3AuthInstance);
  }, [config]);
  (0,external_react_namespaceObject.useEffect)(() => {
    async function init() {
      try {
        setInitError(null);
        setIsInitializing(true);
        const {
          modalConfig,
          hideWalletDiscovery
        } = config;
        if (modalConfig) {
          await web3Auth.initModal({
            modalConfig,
            hideWalletDiscovery
          });
        } else {
          await web3Auth.initModal();
        }
      } catch (error) {
        setInitError(error);
      } finally {
        setIsInitializing(false);
      }
    }
    if (web3Auth) init();
  }, [web3Auth, config]);
  (0,external_react_namespaceObject.useEffect)(() => {
    const addState = async () => {
      setProvider(web3Auth.provider);
      const userState = await web3Auth.getUserInfo();
      setUserInfo(userState);
      setIsMFAEnabled((userState === null || userState === void 0 ? void 0 : userState.isMfaEnabled) || false);
    };
    const resetState = () => {
      setProvider(null);
      setUserInfo(null);
      setIsMFAEnabled(false);
    };
    if (web3Auth) {
      if (isConnected) addState();else resetState();
    }
  }, [web3Auth, isConnected]);
  (0,external_react_namespaceObject.useEffect)(() => {
    const notReadyListener = () => setStatus(web3Auth.status);
    const readyListener = () => {
      setStatus(web3Auth.status);
      setIsInitialized(true);
    };
    const connectedListener = () => {
      setStatus(web3Auth.status);
      // we do this because of rehydration issues. status connected is fired first but web3auth sdk is not ready yet.
      if (web3Auth.status === base_namespaceObject.ADAPTER_STATUS.CONNECTED) {
        setIsInitialized(true);
        setIsConnected(true);
      }
    };
    const disconnectedListener = () => {
      setStatus(web3Auth.status);
      setIsConnected(false);
    };
    const connectingListener = () => {
      setStatus(web3Auth.status);
    };
    const errorListener = () => {
      setStatus(base_namespaceObject.ADAPTER_STATUS.ERRORED);
    };
    if (web3Auth) {
      // web3Auth is initialized here.
      setStatus(web3Auth.status);
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.NOT_READY, notReadyListener);
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.READY, readyListener);
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, connectedListener);
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.DISCONNECTED, disconnectedListener);
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.CONNECTING, connectingListener);
      web3Auth.on(base_namespaceObject.ADAPTER_EVENTS.ERRORED, errorListener);
    }
    return () => {
      if (web3Auth) {
        web3Auth.off(base_namespaceObject.ADAPTER_EVENTS.NOT_READY, notReadyListener);
        web3Auth.off(base_namespaceObject.ADAPTER_EVENTS.READY, readyListener);
        web3Auth.off(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, connectedListener);
        web3Auth.off(base_namespaceObject.ADAPTER_EVENTS.DISCONNECTED, disconnectedListener);
        web3Auth.off(base_namespaceObject.ADAPTER_EVENTS.CONNECTING, connectingListener);
        web3Auth.off(base_namespaceObject.ADAPTER_EVENTS.ERRORED, errorListener);
      }
    };
  }, [web3Auth]);
  const value = (0,external_react_namespaceObject.useMemo)(() => {
    return {
      web3Auth,
      isConnected,
      isInitialized,
      provider,
      userInfo,
      isMFAEnabled,
      status,
      connect,
      enableMFA,
      manageMFA,
      logout,
      addAndSwitchChain,
      addChain,
      addPlugin,
      authenticateUser,
      switchChain,
      getPlugin,
      isInitializing,
      isConnecting,
      initError,
      connectError
    };
  }, [web3Auth, isConnected, isInitialized, provider, userInfo, isMFAEnabled, status, getPlugin, connect, enableMFA, manageMFA, logout, addAndSwitchChain, addChain, addPlugin, authenticateUser, switchChain, isInitializing, isConnecting, initError, connectError]);
  return /*#__PURE__*/(0,external_react_namespaceObject.createElement)(Web3AuthInnerContext.Provider, {
    value
  }, children);
}
;// ./src/context/index.ts

;// ./src/hooks/useWeb3Auth.ts



const useWeb3Auth = () => {
  const context = (0,external_react_namespaceObject.useContext)(Web3AuthInnerContext);
  if (!context) {
    throw base_namespaceObject.WalletInitializationError.fromCode(1000, "usage of useWeb3Auth not wrapped in `Web3AuthContextProvider`.");
  }
  return context;
};
;// ./src/hooks/index.ts

;// ./src/Web3AuthProvider.ts


function Web3AuthProvider({
  config,
  children
}) {
  return /*#__PURE__*/(0,external_react_namespaceObject.createElement)(Web3AuthInnerProvider, {
    config
  }, children);
}
;// ./src/index.ts




module.exports = __webpack_exports__;
/******/ })()
;