import { CustomChainConfig, IBaseProvider, SafeEventEmitterProvider } from "@web3auth/base";
import { BaseProvider, BaseProviderConfig, BaseProviderState } from "./baseProvider";
export interface CommonPrivKeyProviderConfig extends BaseProviderConfig {
    chainConfig: CustomChainConfig;
}
export interface CommonPrivKeyProviderState extends BaseProviderState {
    privateKey?: string;
}
export declare class CommonPrivateKeyProvider extends BaseProvider<BaseProviderConfig, CommonPrivKeyProviderState, string> implements IBaseProvider<string> {
    _providerEngineProxy: SafeEventEmitterProvider | null;
    constructor({ config, state }: {
        config: CommonPrivKeyProviderConfig;
        state?: CommonPrivKeyProviderState;
    });
    get provider(): SafeEventEmitterProvider | null;
    set provider(_: SafeEventEmitterProvider | null);
    static getProviderInstance: (params: {
        privKey: string;
        chainConfig: CustomChainConfig;
    }) => Promise<CommonPrivateKeyProvider>;
    addChain(_: CustomChainConfig): void;
    setupProvider(privKey: string): Promise<void>;
    updateProviderEngineProxy(provider: SafeEventEmitterProvider): void;
    switchChain(_: {
        chainId: string;
    }): Promise<void>;
    protected getProviderEngineProxy(): SafeEventEmitterProvider | null;
    protected lookupNetwork(): Promise<string>;
    private getPrivKeyMiddleware;
    private createPrivKeyMiddleware;
}
