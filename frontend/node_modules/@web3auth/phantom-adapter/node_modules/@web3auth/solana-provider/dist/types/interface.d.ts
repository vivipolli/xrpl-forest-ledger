import type { Transaction, VersionedTransaction } from "@solana/web3.js";
import type Solflare from "@solflare-wallet/sdk";
import type { SafeEventEmitter } from "@toruslabs/openlogin-jrpc";
import { RequestArguments } from "@web3auth/base";
import BN from "bn.js";
import { InjectedProvider } from "./providers";
export type TransactionOrVersionedTransaction = Transaction | VersionedTransaction;
export interface ISolanaWallet {
    publicKey?: {
        toBytes(): Uint8Array;
    };
    signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{
        signature: string;
    }>;
    signTransaction?<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions?<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]>;
    signMessage(message: Uint8Array, display?: string): Promise<Uint8Array>;
    request<T, U>(args: RequestArguments<T>): Promise<U>;
}
export interface IPhantomWalletProvider extends SafeEventEmitter {
    isConnected: boolean;
    publicKey?: {
        toBytes(): Uint8Array;
    };
    signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{
        signature: string;
    }>;
    signTransaction?<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions?<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]>;
    signMessage(message: Uint8Array): Promise<{
        signature: Uint8Array;
        publicKey: BN;
    }>;
    request<T, U>(args: RequestArguments<T>): Promise<U>;
    _handleDisconnect(...args: unknown[]): void;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
}
export interface IBaseWalletProvider {
    publicKey?: {
        toBytes(): Uint8Array;
    };
    signMessage?(message: Uint8Array, display?: "hex" | "utf8"): Promise<{
        signature: Uint8Array;
        publicKey: BN;
    }>;
    signTransaction?<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions?<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]>;
    signAndSendTransaction?<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{
        signature: string;
    }>;
}
export type SolflareWallet = Solflare & {
    signMessage(data: Uint8Array, display?: "hex" | "utf8"): Promise<{
        signature: Uint8Array;
        publicKey: BN;
    }>;
    signAndSendTransaction?<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{
        signature: string;
    }>;
};
export interface ITorusWalletProvider extends InjectedProvider {
    sendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<string>;
    signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]>;
    signMessage(data: Uint8Array): Promise<Uint8Array>;
}
export interface IWalletStandardProviderHandler extends IBaseWalletProvider {
}
