'use strict';

var baseControllers = require('@toruslabs/base-controllers');
var auth = require('@web3auth/auth');
var xrplRpcMiddlewares = require('./xrplRpcMiddlewares.js');

function createChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === xrplRpcMiddlewares.RPC_METHODS.CHAIN_ID) {
      res.result = chainId;
      return end();
    }
    return next();
  };
}
function createProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === xrplRpcMiddlewares.RPC_METHODS.PROVIDER_CHAIN_CONFIG) {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createConfigMiddleware(providerConfig) {
  const {
    chainId
  } = providerConfig;
  return auth.mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);
}
function createJsonRpcClient(providerConfig) {
  const {
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = baseControllers.createFetchMiddleware({
    rpcTarget
  });
  const networkMiddleware = auth.mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);
  return {
    networkMiddleware,
    fetchMiddleware
  };
}

exports.createChainIdMiddleware = createChainIdMiddleware;
exports.createConfigMiddleware = createConfigMiddleware;
exports.createJsonRpcClient = createJsonRpcClient;
exports.createProviderConfigMiddleware = createProviderConfigMiddleware;
