{
  "version": 3,
  "sources": ["../../@web3auth/solana-provider/dist/lib.esm/solanaWallet.js", "../../@web3auth/solana-provider/dist/lib.esm/rpc/solanaRpcMiddlewares.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/injectedProviderProxy.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/torus/providerHandlers.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/torus/torusInjectedProvider.js", "../../@web3auth/solana-provider/dist/lib.esm/rpc/JrpcClient.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/base/baseInjectedProvider.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/base/providerHandlers.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/walletStandardProvider.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/privateKeyProvider/solanaPrivateKeyUtils.js", "../../@web3auth/solana-provider/dist/lib.esm/providers/privateKeyProvider/solanaPrivateKeyProvider.js"],
  "sourcesContent": ["import _defineProperty from '@babel/runtime/helpers/defineProperty';\n\nclass SolanaWallet {\n  constructor(provider) {\n    _defineProperty(this, \"provider\", void 0);\n    this.provider = provider;\n  }\n  async requestAccounts() {\n    const accounts = await this.provider.request({\n      method: \"requestAccounts\"\n    });\n    return accounts;\n  }\n  async signAndSendTransaction(transaction) {\n    const {\n      signature\n    } = await this.provider.request({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return {\n      signature\n    };\n  }\n  async signTransaction(transaction) {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction\n      }\n    });\n    return signedTransaction;\n  }\n  async signAllTransactions(transactions) {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions\n      }\n    });\n    return signedTransactions;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"signMessage\",\n      params: {\n        message: data\n      }\n    });\n    return response;\n  }\n  async request(args) {\n    const result = await this.provider.request(args);\n    return result;\n  }\n}\n\nexport { SolanaWallet };\n", "import { createAsyncMiddleware, mergeMiddleware } from '@web3auth/auth';\n\nfunction createGetAccountsMiddleware({\n  getAccounts\n}) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getAccounts\") return next();\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGetPublicKeyMiddleware({\n  getPublicKey\n}) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"getPublicKey\") return next();\n    if (!getPublicKey) throw new Error(\"WalletMiddleware - opts.getPublicKey not provided\");\n    const publicKey = await getPublicKey(request);\n    response.result = publicKey;\n    return undefined;\n  });\n}\nfunction createRequestAccountsMiddleware({\n  requestAccounts\n}) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== \"requestAccounts\") return next();\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n    const result = await handler(request);\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    requestAccounts,\n    signTransaction,\n    signAndSendTransaction,\n    signAllTransactions,\n    signMessage,\n    getPrivateKey,\n    getSecretKey,\n    getPublicKey\n  } = providerHandlers;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey), createGenericJRPCMiddleware(\"private_key\", getPrivateKey), createGenericJRPCMiddleware(\"public_key\", getPublicKey), createGenericJRPCMiddleware(\"solanaPublicKey\", getPublicKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\nfunction createChainSwitchMiddleware({\n  addNewChainConfig,\n  switchSolanaChain\n}) {\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createAccountMiddleware({\n  updatePrivatekey\n}) {\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nexport { createAccountMiddleware, createChainSwitchMiddleware, createGenericJRPCMiddleware, createGetAccountsMiddleware, createGetPublicKeyMiddleware, createRequestAccountsMiddleware, createSolanaMiddleware };\n", "import { createAsyncMiddleware } from '@web3auth/auth';\n\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const result = await provider.request(req);\n    res.result = result;\n  });\n}\n\nexport { createInjectedProviderProxyMiddleware };\n", "import { rpcErrors } from '@web3auth/auth';\n\nconst getTorusHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPublicKey: async () => {\n      const publicKeys = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return publicKeys[0];\n    },\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request({\n        method: \"solana_requestAccounts\",\n        params: {}\n      });\n      return accounts;\n    },\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signMessage: async req => {\n      var _req$params;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n    signTransaction: async req => {\n      var _req$params2;\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return {\n        signature: response\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5;\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    }\n  };\n  return providerHandlers;\n};\n\nexport { getTorusHandlers };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { providerErrors, JRPCEngine, providerFromEngine } from '@web3auth/auth';\nimport { WalletInitializationError, isHexStrict } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { createSolanaMiddleware } from '../../../rpc/solanaRpcMiddlewares.js';\nimport { createInjectedProviderProxyMiddleware } from '../injectedProviderProxy.js';\nimport { getTorusHandlers } from './providerHandlers.js';\n\nclass TorusInjectedProvider extends BaseProvider {\n  constructor({\n    config,\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"PROVIDER_CHAIN_NAMESPACE\", \"solana\");\n  }\n  async switchChain(params) {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{\n        chainId: params.chainId\n      }]\n    });\n  }\n  async addChain(chainConfig) {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [{\n        chainId: chainConfig.chainId,\n        chainName: chainConfig.displayName,\n        rpcUrls: [chainConfig.rpcTarget],\n        blockExplorerUrls: [chainConfig.blockExplorerUrl],\n        iconUrls: [chainConfig.logo],\n        nativeCurrency: {\n          name: chainConfig.tickerName,\n          symbol: chainConfig.ticker,\n          decimals: chainConfig.decimals || 18\n        }\n      }]\n    });\n  }\n  async setupProvider(injectedProvider) {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    const {\n      chainNamespace\n    } = this.config.chainConfig;\n    if (chainNamespace !== this.PROVIDER_CHAIN_NAMESPACE) throw WalletInitializationError.incompatibleChainNameSpace(\"Invalid chain namespace\");\n    await this.setupEngine(injectedProvider);\n  }\n  async lookupNetwork() {\n    if (!this.provider) throw providerErrors.custom({\n      message: \"Torus solana provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedChainId = await this.provider.request({\n      method: \"solana_chainId\"\n    });\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.emit(\"connect\", {\n      chainId: this.state.chainId\n    });\n    this.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n  async setupEngine(injectedProvider) {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async handleInjectedProviderUpdate(injectedProvider) {\n    injectedProvider.on(\"accountsChanged\", async accounts => {\n      this.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async chainId => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: _objectSpread(_objectSpread({}, this.config.chainConfig), {}, {\n          chainId: connectedHexChainId\n        })\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n\nexport { TorusInjectedProvider };\n", "import { createFetchMiddleware } from '@toruslabs/base-controllers';\nimport { mergeMiddleware } from '@web3auth/auth';\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createConfigMiddleware(providerConfig) {\n  const {\n    chainId\n  } = providerConfig;\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nexport { createChainIdMiddleware, createConfigMiddleware, createJsonRpcClient, createProviderConfigMiddleware };\n", "import { JRPCEngine, providerFromEngine } from '@web3auth/auth';\nimport { WalletLoginError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { createConfigMiddleware } from '../../../rpc/JrpcClient.js';\nimport { createSolanaMiddleware } from '../../../rpc/solanaRpcMiddlewares.js';\n\nclass BaseInjectedProvider extends BaseProvider {\n  constructor({\n    config,\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n  }\n  async switchChain(_) {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n  async setupProvider(injectedProvider) {\n    const engine = new JRPCEngine();\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig);\n    engine.push(configMiddleware);\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async lookupNetwork() {\n    const {\n      chainConfig\n    } = this.config;\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    return chainConfig.chainId || \"\";\n  }\n  getInjectedProviderProxy(_) {\n    return undefined;\n  }\n}\n\nexport { BaseInjectedProvider };\n", "import { rpcErrors } from '@web3auth/auth';\nimport bs58 from 'bs58';\n\nconst getBaseProviderHandlers = injectedProvider => {\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getPublicKey: async () => {\n      return injectedProvider.publicKey ? bs58.encode(injectedProvider.publicKey.toBytes()) : \"\";\n    },\n    getAccounts: async () => injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [],\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signTransaction: async req => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async req => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async req => {\n      var _req$params, _req$params2;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async req => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return {\n        signature: txRes.signature\n      };\n    }\n  };\n  return providerHandlers;\n};\n\nexport { getBaseProviderHandlers };\n", "import { BaseInjectedProvider } from './base/baseInjectedProvider.js';\nimport { getBaseProviderHandlers } from './base/providerHandlers.js';\n\nclass WalletStandardProvider extends BaseInjectedProvider {\n  getProviderHandlers(injectedProvider) {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n}\n\nexport { WalletStandardProvider };\n", "import { Keypair, VersionedTransaction } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\nimport { providerErrors, rpcErrors } from '@web3auth/auth';\nimport { WalletInitializationError } from '@web3auth/base';\nimport bs58 from 'bs58';\n\nasync function getProviderHandlers({\n  privKey,\n  keyExportEnabled,\n  getProviderEngineProxy\n}) {\n  const keyPairGenerator = () => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n    getPublicKey: async () => keyPair.publicKey.toBase58(),\n    getPrivateKey: async () => {\n      if (!keyExportEnabled) {\n        throw providerErrors.custom({\n          message: \"Private key export is disabled\",\n          code: 4902\n        });\n      }\n      return privKey;\n    },\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n    signTransaction: async req => {\n      var _req$params;\n      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n        transaction.sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n    signMessage: async req => {\n      var _req$params2;\n      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n    signAndSendTransaction: async req => {\n      var _req$params3;\n      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const transaction = req.params.message;\n      if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n        transaction.sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), {\n          encoding: \"base64\",\n          preflightCommitment: \"confirmed\"\n        }]\n      });\n      return {\n        signature: sig\n      };\n    },\n    signAllTransactions: async req => {\n      var _req$params4, _req$params5, _req$params6;\n      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if (transaction.version !== undefined || transaction instanceof VersionedTransaction) {\n          transaction.sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    }\n  };\n  return providerHandlers;\n}\n\nexport { getProviderHandlers };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { providerErrors, getED25519Key, JRPCEngine, providerFromEngine, rpcErrors } from '@web3auth/auth';\nimport { CHAIN_NAMESPACES, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { createJsonRpcClient } from '../../rpc/JrpcClient.js';\nimport { createSolanaMiddleware, createChainSwitchMiddleware, createAccountMiddleware } from '../../rpc/solanaRpcMiddlewares.js';\nimport { getProviderHandlers } from './solanaPrivateKeyUtils.js';\n\nvar _SolanaPrivateKeyProvider;\nclass SolanaPrivateKeyProvider extends BaseProvider {\n  constructor({\n    config,\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"PROVIDER_CHAIN_NAMESPACE\", CHAIN_NAMESPACES.SOLANA);\n  }\n  async enable() {\n    if (!this.state.privateKey) throw providerErrors.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  getEd25519Key(privateKey) {\n    return getED25519Key(privateKey).sk.toString(\"hex\").padStart(128, \"0\");\n  }\n  async setupProvider(privKey) {\n    const {\n      chainNamespace\n    } = this.config.chainConfig;\n    if (chainNamespace !== this.PROVIDER_CHAIN_NAMESPACE) throw WalletInitializationError.incompatibleChainNameSpace(\"Invalid chain namespace\");\n    const providerHandlers = await getProviderHandlers({\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n      keyExportEnabled: this.config.keyExportEnabled\n    });\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      const accounts = await this._providerEngineProxy.request({\n        method: \"requestAccounts\"\n      });\n      this.emit(\"accountsChanged\", accounts);\n    }\n  }\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"solanaPrivateKey\"\n    });\n    await this.setupProvider(privKey);\n  }\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const health = await this._providerEngineProxy.request({\n      method: \"getHealth\",\n      params: []\n    });\n    const {\n      chainConfig\n    } = this.config;\n    if (health !== \"ok\") throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({\n      chainId: chainConfig.chainId\n    });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.emit(\"chainChanged\", this.state.chainId);\n      this.emit(\"connect\", {\n        chainId: this.state.chainId\n      });\n    }\n    return this.state.chainId;\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addNewChainConfig: async req => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency,\n          iconUrls\n        } = req.params;\n        if (!chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorerUrl: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 9,\n          logo: (iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0]) || \"https://images.toruswallet.io/sol.svg\"\n        });\n      },\n      switchSolanaChain: async req => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw rpcErrors.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async req => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw rpcErrors.invalidParams(\"Missing privateKey\");\n        const {\n          privateKey\n        } = req.params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n_SolanaPrivateKeyProvider = SolanaPrivateKeyProvider;\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new _SolanaPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { SolanaPrivateKeyProvider };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,UAAU;AACpB,oBAAgB,MAAM,YAAY,MAAM;AACxC,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,MAAM,kBAAkB;AACtB,UAAM,WAAW,MAAM,KAAK,SAAS,QAAQ;AAAA,MAC3C,QAAQ;AAAA,IACV,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,uBAAuB,aAAa;AACxC,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,SAAS,QAAQ;AAAA,MAC9B,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF,CAAC;AACD,WAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,gBAAgB,aAAa;AACjC,UAAM,oBAAoB,MAAM,KAAK,SAAS,QAAQ;AAAA,MACpD,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,oBAAoB,cAAc;AACtC,UAAM,qBAAqB,MAAM,KAAK,SAAS,QAAQ;AAAA,MACrD,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,YAAY,MAAM;AACtB,UAAM,WAAW,MAAM,KAAK,SAAS,QAAQ;AAAA,MAC3C,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,QAAQ,MAAM;AAClB,UAAM,SAAS,MAAM,KAAK,SAAS,QAAQ,IAAI;AAC/C,WAAO;AAAA,EACT;AACF;;;ACvDA,SAAS,4BAA4B;AAAA,EACnC;AACF,GAAG;AACD,SAAO,sBAAsB,OAAO,SAAS,UAAU,SAAS;AAC9D,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI,WAAW,cAAe,QAAO,KAAK;AAC1C,QAAI,CAAC,YAAa,OAAM,IAAI,MAAM,kDAAkD;AAEpF,UAAM,WAAW,MAAM,YAAY,OAAO;AAC1C,aAAS,SAAS;AAClB,WAAO;AAAA,EACT,CAAC;AACH;AACA,SAAS,6BAA6B;AAAA,EACpC;AACF,GAAG;AACD,SAAO,sBAAsB,OAAO,SAAS,UAAU,SAAS;AAC9D,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI,WAAW,eAAgB,QAAO,KAAK;AAC3C,QAAI,CAAC,aAAc,OAAM,IAAI,MAAM,mDAAmD;AACtF,UAAM,YAAY,MAAM,aAAa,OAAO;AAC5C,aAAS,SAAS;AAClB,WAAO;AAAA,EACT,CAAC;AACH;AACA,SAAS,gCAAgC;AAAA,EACvC;AACF,GAAG;AACD,SAAO,sBAAsB,OAAO,SAAS,UAAU,SAAS;AAC9D,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI,WAAW,kBAAmB,QAAO,KAAK;AAC9C,QAAI,CAAC,gBAAiB,OAAM,IAAI,MAAM,sDAAsD;AAE5F,UAAM,WAAW,MAAM,gBAAgB,OAAO;AAC9C,aAAS,SAAS;AAClB,WAAO;AAAA,EACT,CAAC;AACH;AACA,SAAS,4BAA4B,cAAc,SAAS;AAC1D,SAAO,sBAAsB,OAAO,SAAS,UAAU,SAAS;AAC9D,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI,WAAW,aAAc,QAAO,KAAK;AACzC,QAAI,CAAC,QAAS,OAAM,IAAI,MAAM,sBAAsB,YAAY,eAAe;AAC/E,UAAM,SAAS,MAAM,QAAQ,OAAO;AACpC,aAAS,SAAS;AAClB,WAAO;AAAA,EACT,CAAC;AACH;AACA,SAAS,uBAAuB,kBAAkB;AAChD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,SAAO,gBAAgB,CAAC,gCAAgC;AAAA,IACtD;AAAA,EACF,CAAC,GAAG,4BAA4B;AAAA,IAC9B;AAAA,EACF,CAAC,GAAG,4BAA4B,mBAAmB,eAAe,GAAG,4BAA4B,0BAA0B,sBAAsB,GAAG,4BAA4B,uBAAuB,mBAAmB,GAAG,4BAA4B,eAAe,WAAW,GAAG,4BAA4B,oBAAoB,aAAa,GAAG,4BAA4B,eAAe,aAAa,GAAG,4BAA4B,cAAc,YAAY,GAAG,4BAA4B,mBAAmB,YAAY,GAAG,4BAA4B,mBAAmB,YAAY,CAAC,CAAC;AACvkB;AACA,SAAS,4BAA4B;AAAA,EACnC;AAAA,EACA;AACF,GAAG;AACD,SAAO,gBAAgB,CAAC,4BAA4B,kBAAkB,iBAAiB,GAAG,4BAA4B,qBAAqB,iBAAiB,CAAC,CAAC;AAChK;AACA,SAAS,wBAAwB;AAAA,EAC/B;AACF,GAAG;AACD,SAAO,gBAAgB,CAAC,4BAA4B,iBAAiB,gBAAgB,CAAC,CAAC;AACzF;;;ACpFA,SAAS,sCAAsC,UAAU;AACvD,SAAO,sBAAsB,OAAO,KAAK,KAAK,UAAU;AACtD,UAAM,SAAS,MAAM,SAAS,QAAQ,GAAG;AACzC,QAAI,SAAS;AAAA,EACf,CAAC;AACH;;;ACLA,IAAM,mBAAmB,sBAAoB;AAC3C,QAAM,mBAAmB;AAAA,IACvB,iBAAiB,YAAY;AAC3B,YAAM,WAAW,MAAM,iBAAiB,QAAQ;AAAA,QAC9C,QAAQ;AAAA,QACR,QAAQ,CAAC;AAAA,MACX,CAAC;AACD,aAAO;AAAA,IACT;AAAA,IACA,cAAc,YAAY;AACxB,YAAM,aAAa,MAAM,iBAAiB,QAAQ;AAAA,QAChD,QAAQ;AAAA,QACR,QAAQ,CAAC;AAAA,MACX,CAAC;AACD,aAAO,WAAW,CAAC;AAAA,IACrB;AAAA,IACA,aAAa,YAAY;AACvB,YAAM,WAAW,MAAM,iBAAiB,QAAQ;AAAA,QAC9C,QAAQ;AAAA,QACR,QAAQ,CAAC;AAAA,MACX,CAAC;AACD,aAAO;AAAA,IACT;AAAA,IACA,eAAe,YAAY;AACzB,YAAM,UAAU,mBAAmB;AAAA,IACrC;AAAA,IACA,cAAc,YAAY;AACxB,YAAM,UAAU,mBAAmB;AAAA,IACrC;AAAA,IACA,aAAa,OAAM,QAAO;AACxB,UAAI;AACJ,UAAI,GAAG,cAAc,IAAI,YAAY,QAAQ,gBAAgB,UAAU,YAAY,UAAU;AAC3F,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,UAAU,MAAM,iBAAiB,YAAY,IAAI,OAAO,OAAO;AACrE,aAAO;AAAA,IACT;AAAA,IACA,iBAAiB,OAAM,QAAO;AAC5B,UAAI;AACJ,UAAI,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,UAAU;AAC9F,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,YAAY,IAAI,OAAO;AAC7B,YAAM,WAAW,MAAM,iBAAiB,gBAAgB,SAAS;AACjE,aAAO;AAAA,IACT;AAAA,IACA,wBAAwB,OAAM,QAAO;AACnC,UAAI;AACJ,UAAI,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,UAAU;AAC9F,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,YAAY,IAAI,OAAO;AAC7B,YAAM,WAAW,MAAM,iBAAiB,gBAAgB,SAAS;AACjE,aAAO;AAAA,QACL,WAAW;AAAA,MACb;AAAA,IACF;AAAA,IACA,qBAAqB,OAAM,QAAO;AAChC,UAAI,cAAc;AAClB,UAAI,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,YAAY,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,QAAQ,SAAS;AACnM,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,eAAe,IAAI,OAAO;AAChC,YAAM,WAAW,MAAM,iBAAiB,oBAAoB,YAAY;AACxE,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;;;AC7DA,IAAM,wBAAN,cAAoC,aAAa;AAAA,EAC/C,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAAG;AACD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,CAAC;AACD,oBAAgB,MAAM,4BAA4B,QAAQ;AAAA,EAC5D;AAAA,EACA,MAAM,YAAY,QAAQ;AAExB,UAAM,KAAK,SAAS,QAAQ;AAAA,MAC1B,QAAQ;AAAA,MACR,QAAQ,CAAC;AAAA,QACP,SAAS,OAAO;AAAA,MAClB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,MAAM,SAAS,aAAa;AAC1B,UAAM,SAAS,WAAW;AAC1B,UAAM,KAAK,SAAS,QAAQ;AAAA,MAC1B,QAAQ;AAAA,MACR,QAAQ,CAAC;AAAA,QACP,SAAS,YAAY;AAAA,QACrB,WAAW,YAAY;AAAA,QACvB,SAAS,CAAC,YAAY,SAAS;AAAA,QAC/B,mBAAmB,CAAC,YAAY,gBAAgB;AAAA,QAChD,UAAU,CAAC,YAAY,IAAI;AAAA,QAC3B,gBAAgB;AAAA,UACd,MAAM,YAAY;AAAA,UAClB,QAAQ,YAAY;AAAA,UACpB,UAAU,YAAY,YAAY;AAAA,QACpC;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,MAAM,cAAc,kBAAkB;AACpC,SAAK,6BAA6B,gBAAgB;AAClD,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK,OAAO;AAChB,QAAI,mBAAmB,KAAK,yBAA0B,OAAM,0BAA0B,2BAA2B,yBAAyB;AAC1I,UAAM,KAAK,YAAY,gBAAgB;AAAA,EACzC;AAAA,EACA,MAAM,gBAAgB;AACpB,QAAI,CAAC,KAAK,SAAU,OAAM,eAAe,OAAO;AAAA,MAC9C,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AACD,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK,OAAO;AAChB,UAAM,mBAAmB,MAAM,KAAK,SAAS,QAAQ;AAAA,MACnD,QAAQ;AAAA,IACV,CAAC;AACD,UAAM,sBAAsB,YAAY,iBAAiB,SAAS,CAAC,IAAI,mBAAmB,KAAK,SAAS,kBAAkB,EAAE,EAAE,SAAS,EAAE,CAAC;AAC1I,QAAI,YAAY,oBAAqB,OAAM,0BAA0B,mBAAmB,oCAAoC,mBAAmB,eAAe,OAAO,EAAE;AACvK,SAAK,OAAO;AAAA,MACV,SAAS;AAAA,IACX,CAAC;AACD,SAAK,KAAK,WAAW;AAAA,MACnB,SAAS,KAAK,MAAM;AAAA,IACtB,CAAC;AACD,SAAK,KAAK,gBAAgB,KAAK,MAAM,OAAO;AAC5C,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,MAAM,YAAY,kBAAkB;AAClC,UAAM,mBAAmB,iBAAiB,gBAAgB;AAC1D,UAAM,mBAAmB,uBAAuB,gBAAgB;AAChE,UAAM,wBAAwB,sCAAsC,gBAAgB;AACpF,UAAM,SAAS,IAAI,WAAW;AAC9B,WAAO,KAAK,gBAAgB;AAC5B,WAAO,KAAK,qBAAqB;AACjC,UAAM,WAAW,mBAAmB,MAAM;AAC1C,SAAK,0BAA0B,QAAQ;AACvC,UAAM,KAAK,cAAc;AAAA,EAC3B;AAAA,EACA,MAAM,6BAA6B,kBAAkB;AACnD,qBAAiB,GAAG,mBAAmB,OAAM,aAAY;AACvD,WAAK,KAAK,mBAAmB,QAAQ;AAAA,IACvC,CAAC;AACD,qBAAiB,GAAG,gBAAgB,OAAM,YAAW;AACnD,YAAM,sBAAsB,YAAY,OAAO,IAAI,UAAU,KAAK,SAAS,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC;AAEpG,WAAK,UAAU;AAAA,QACb,aAAa,eAAc,eAAc,CAAC,GAAG,KAAK,OAAO,WAAW,GAAG,CAAC,GAAG;AAAA,UACzE,SAAS;AAAA,QACX,CAAC;AAAA,MACH,CAAC;AACD,YAAM,KAAK,cAAc,gBAAgB;AAAA,IAC3C,CAAC;AAAA,EACH;AACF;;;ACpGA,SAAS,wBAAwB,SAAS;AACxC,SAAO,CAAC,KAAK,KAAK,MAAM,QAAQ;AAC9B,QAAI,IAAI,WAAW,kBAAkB;AACnC,UAAI,SAAS;AACb,aAAO,IAAI;AAAA,IACb;AACA,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,+BAA+B,gBAAgB;AACtD,SAAO,CAAC,KAAK,KAAK,MAAM,QAAQ;AAC9B,QAAI,IAAI,WAAW,0BAA0B;AAC3C,UAAI,SAAS;AACb,aAAO,IAAI;AAAA,IACb;AACA,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,uBAAuB,gBAAgB;AAC9C,QAAM;AAAA,IACJ;AAAA,EACF,IAAI;AACJ,SAAO,gBAAgB,CAAC,wBAAwB,OAAO,GAAG,+BAA+B,cAAc,CAAC,CAAC;AAC3G;AACA,SAAS,oBAAoB,gBAAgB;AAC3C,QAAM;AAAA,IACJ;AAAA,EACF,IAAI;AACJ,QAAM,kBAAkB,sBAAsB;AAAA,IAC5C;AAAA,EACF,CAAC;AACD,QAAM,oBAAoB,gBAAgB,CAAC,uBAAuB,cAAc,GAAG,eAAe,CAAC;AACnG,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;;;ACjCA,IAAM,uBAAN,cAAmC,aAAa;AAAA,EAC9C,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAAG;AACD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,YAAY,GAAG;AACnB,UAAM,iBAAiB,qBAAqB,kDAAkD;AAAA,EAChG;AAAA,EACA,MAAM,cAAc,kBAAkB;AACpC,UAAM,SAAS,IAAI,WAAW;AAC9B,UAAM,mBAAmB,KAAK,oBAAoB,gBAAgB;AAClE,UAAM,mBAAmB,uBAAuB,gBAAgB;AAChE,WAAO,KAAK,gBAAgB;AAC5B,UAAM,mBAAmB,uBAAuB,KAAK,OAAO,WAAW;AACvE,WAAO,KAAK,gBAAgB;AAC5B,UAAM,wBAAwB,KAAK,yBAAyB,gBAAgB;AAC5E,QAAI,uBAAuB;AACzB,aAAO,KAAK,qBAAqB;AAAA,IACnC;AACA,UAAM,WAAW,mBAAmB,MAAM;AAC1C,SAAK,0BAA0B,QAAQ;AACvC,UAAM,KAAK,cAAc;AAAA,EAC3B;AAAA,EACA,MAAM,gBAAgB;AACpB,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,SAAK,OAAO;AAAA,MACV,SAAS,YAAY;AAAA,IACvB,CAAC;AACD,WAAO,YAAY,WAAW;AAAA,EAChC;AAAA,EACA,yBAAyB,GAAG;AAC1B,WAAO;AAAA,EACT;AACF;;;AC7CA,kBAAiB;AAEjB,IAAM,0BAA0B,sBAAoB;AAClD,QAAM,mBAAmB;AAAA,IACvB,iBAAiB,YAAY;AAC3B,aAAO,iBAAiB,YAAY,CAAC,YAAAA,QAAK,OAAO,iBAAiB,UAAU,QAAQ,CAAC,CAAC,IAAI,CAAC;AAAA,IAC7F;AAAA,IACA,cAAc,YAAY;AACxB,aAAO,iBAAiB,YAAY,YAAAA,QAAK,OAAO,iBAAiB,UAAU,QAAQ,CAAC,IAAI;AAAA,IAC1F;AAAA,IACA,aAAa,YAAY,iBAAiB,YAAY,CAAC,YAAAA,QAAK,OAAO,iBAAiB,UAAU,QAAQ,CAAC,CAAC,IAAI,CAAC;AAAA,IAC7G,eAAe,YAAY;AACzB,YAAM,UAAU,mBAAmB;AAAA,IACrC;AAAA,IACA,cAAc,YAAY;AACxB,YAAM,UAAU,mBAAmB;AAAA,IACrC;AAAA,IACA,iBAAiB,OAAM,QAAO;AAC5B,YAAM,cAAc,MAAM,iBAAiB,gBAAgB,IAAI,OAAO,OAAO;AAC7E,aAAO;AAAA,IACT;AAAA,IACA,aAAa,OAAM,QAAO;AACxB,YAAM,UAAU,MAAM,iBAAiB,YAAY,IAAI,OAAO,SAAS,IAAI,OAAO,OAAO;AACzF,aAAO,QAAQ;AAAA,IACjB;AAAA,IACA,qBAAqB,OAAM,QAAO;AAChC,UAAI,aAAa;AACjB,UAAI,GAAG,cAAc,IAAI,YAAY,QAAQ,gBAAgB,UAAU,YAAY,YAAY,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,QAAQ,SAAS;AAChM,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,cAAc,MAAM,iBAAiB,oBAAoB,IAAI,OAAO,OAAO;AACjF,aAAO;AAAA,IACT;AAAA,IACA,wBAAwB,OAAM,QAAO;AACnC,YAAM,QAAQ,MAAM,iBAAiB,uBAAuB,IAAI,OAAO,OAAO;AAC9E,aAAO;AAAA,QACL,WAAW,MAAM;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;;;ACvCA,IAAM,yBAAN,cAAqC,qBAAqB;AAAA,EACxD,oBAAoB,kBAAkB;AACpC,WAAO,wBAAwB,gBAAgB;AAAA,EACjD;AACF;;;ACPA;AACA,0BAAiB;AAGjB,IAAAC,eAAiB;AAEjB,eAAe,oBAAoB;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,QAAM,mBAAmB,MAAM;AAC7B,WAAO,QAAQ,cAAc,OAAO,KAAK,SAAS,KAAK,CAAC;AAAA,EAC1D;AACA,MAAI,OAAO,YAAY,SAAU,OAAM,0BAA0B,cAAc,0BAA0B;AACzG,QAAM,UAAU,iBAAiB;AACjC,QAAM,mBAAmB;AAAA,IACvB,iBAAiB,YAAY;AAC3B,aAAO,CAAC,QAAQ,UAAU,SAAS,CAAC;AAAA,IACtC;AAAA,IACA,aAAa,YAAY,CAAC,QAAQ,UAAU,SAAS,CAAC;AAAA,IACtD,cAAc,YAAY,QAAQ,UAAU,SAAS;AAAA,IACrD,eAAe,YAAY;AACzB,UAAI,CAAC,kBAAkB;AACrB,cAAM,eAAe,OAAO;AAAA,UAC1B,SAAS;AAAA,UACT,MAAM;AAAA,QACR,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAAA,IACA,cAAc,YAAY,aAAAC,QAAK,OAAO,QAAQ,SAAS;AAAA,IACvD,iBAAiB,OAAM,QAAO;AAC5B,UAAI;AACJ,UAAI,GAAG,cAAc,IAAI,YAAY,QAAQ,gBAAgB,UAAU,YAAY,UAAU;AAC3F,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,cAAc,IAAI,OAAO;AAC/B,UAAI,YAAY,YAAY,UAAa,uBAAuB,sBAAsB;AACpF,oBAAY,KAAK,CAAC,OAAO,CAAC;AAAA,MAC5B,OAAO;AACL,oBAAY,YAAY,OAAO;AAAA,MACjC;AACA,aAAO;AAAA,IACT;AAAA,IACA,aAAa,OAAM,QAAO;AACxB,UAAI;AACJ,UAAI,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,UAAU;AAC9F,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,YAAY,oBAAAC,QAAK,KAAK,SAAS,IAAI,OAAO,SAAS,QAAQ,SAAS;AAC1E,aAAO;AAAA,IACT;AAAA,IACA,wBAAwB,OAAM,QAAO;AACnC,UAAI;AACJ,UAAI,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,UAAU;AAC9F,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,uBAAuB,uBAAuB;AACpD,UAAI,CAAC,qBAAsB,OAAM,eAAe,OAAO;AAAA,QACrD,SAAS;AAAA,QACT,MAAM;AAAA,MACR,CAAC;AACD,YAAM,cAAc,IAAI,OAAO;AAC/B,UAAI,YAAY,YAAY,UAAa,uBAAuB,sBAAsB;AACpF,oBAAY,KAAK,CAAC,OAAO,CAAC;AAAA,MAC5B,OAAO;AACL,oBAAY,YAAY,OAAO;AAAA,MACjC;AACA,YAAM,MAAM,MAAM,qBAAqB,QAAQ;AAAA,QAC7C,QAAQ;AAAA,QACR,QAAQ,CAAC,OAAO,KAAK,YAAY,UAAU,CAAC,EAAE,SAAS,QAAQ,GAAG;AAAA,UAChE,UAAU;AAAA,UACV,qBAAqB;AAAA,QACvB,CAAC;AAAA,MACH,CAAC;AACD,aAAO;AAAA,QACL,WAAW;AAAA,MACb;AAAA,IACF;AAAA,IACA,qBAAqB,OAAM,QAAO;AAChC,UAAI,cAAc,cAAc;AAChC,UAAI,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,YAAY,GAAG,eAAe,IAAI,YAAY,QAAQ,iBAAiB,UAAU,aAAa,QAAQ,SAAS;AACnM,cAAM,UAAU,cAAc,SAAS;AAAA,MACzC;AACA,YAAM,QAAQ,eAAe,IAAI,YAAY,QAAQ,iBAAiB,SAAS,SAAS,aAAa;AACrG,iBAAW,MAAM,QAAQ,CAAC,GAAG;AAC3B,cAAM,cAAc;AACpB,YAAI,YAAY,YAAY,UAAa,uBAAuB,sBAAsB;AACpF,sBAAY,KAAK,CAAC,OAAO,CAAC;AAAA,QAC5B,OAAO;AACL,sBAAY,YAAY,OAAO;AAAA,QACjC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;;;AC1FA,IAAI;AACJ,IAAM,2BAAN,cAAuC,aAAa;AAAA,EAClD,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAAG;AACD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,CAAC;AACD,oBAAgB,MAAM,4BAA4B,iBAAiB,MAAM;AAAA,EAC3E;AAAA,EACA,MAAM,SAAS;AACb,QAAI,CAAC,KAAK,MAAM,WAAY,OAAM,eAAe,OAAO;AAAA,MACtD,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AACD,UAAM,KAAK,cAAc,KAAK,MAAM,UAAU;AAC9C,WAAO,KAAK,qBAAqB,QAAQ;AAAA,MACvC,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,cAAc,YAAY;AACxB,WAAO,cAAc,UAAU,EAAE,GAAG,SAAS,KAAK,EAAE,SAAS,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,MAAM,cAAc,SAAS;AAC3B,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK,OAAO;AAChB,QAAI,mBAAmB,KAAK,yBAA0B,OAAM,0BAA0B,2BAA2B,yBAAyB;AAC1I,UAAM,mBAAmB,MAAM,oBAAoB;AAAA,MACjD;AAAA,MACA,wBAAwB,KAAK,uBAAuB,KAAK,IAAI;AAAA,MAC7D,kBAAkB,KAAK,OAAO;AAAA,IAChC,CAAC;AACD,UAAM,mBAAmB,uBAAuB,gBAAgB;AAChE,UAAM,SAAS,IAAI,WAAW;AAC9B,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,oBAAoB,KAAK,OAAO,WAAW;AAC/C,WAAO,KAAK,KAAK,yBAAyB,CAAC;AAC3C,WAAO,KAAK,KAAK,qBAAqB,CAAC;AACvC,WAAO,KAAK,gBAAgB;AAC5B,WAAO,KAAK,iBAAiB;AAC7B,UAAM,WAAW,mBAAmB,MAAM;AAC1C,SAAK,0BAA0B,QAAQ;AACvC,UAAM,KAAK,cAAc;AAAA,EAC3B;AAAA,EACA,MAAM,cAAc,QAAQ;AAC1B,QAAI,CAAC,KAAK,qBAAsB,OAAM,eAAe,OAAO;AAAA,MAC1D,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AACD,UAAM,cAAc,MAAM,KAAK,qBAAqB,QAAQ;AAAA,MAC1D,QAAQ;AAAA,IACV,CAAC;AACD,QAAI,gBAAgB,OAAO,YAAY;AACrC,YAAM,KAAK,cAAc,OAAO,UAAU;AAC1C,YAAM,WAAW,MAAM,KAAK,qBAAqB,QAAQ;AAAA,QACvD,QAAQ;AAAA,MACV,CAAC;AACD,WAAK,KAAK,mBAAmB,QAAQ;AAAA,IACvC;AAAA,EACF;AAAA,EACA,MAAM,YAAY,QAAQ;AACxB,QAAI,CAAC,KAAK,qBAAsB,OAAM,eAAe,OAAO;AAAA,MAC1D,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AACD,UAAM,cAAc,KAAK,eAAe,OAAO,OAAO;AACtD,SAAK,OAAO;AAAA,MACV,SAAS;AAAA,IACX,CAAC;AACD,SAAK,UAAU;AAAA,MACb;AAAA,IACF,CAAC;AACD,UAAM,UAAU,MAAM,KAAK,qBAAqB,QAAQ;AAAA,MACtD,QAAQ;AAAA,IACV,CAAC;AACD,UAAM,KAAK,cAAc,OAAO;AAAA,EAClC;AAAA,EACA,MAAM,gBAAgB;AACpB,QAAI,CAAC,KAAK,qBAAsB,OAAM,eAAe,OAAO;AAAA,MAC1D,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AACD,UAAM,SAAS,MAAM,KAAK,qBAAqB,QAAQ;AAAA,MACrD,QAAQ;AAAA,MACR,QAAQ,CAAC;AAAA,IACX,CAAC;AACD,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,QAAI,WAAW,KAAM,OAAM,0BAA0B,mBAAmB,sDAAsD,YAAY,SAAS,EAAE;AACrJ,SAAK,OAAO;AAAA,MACV,SAAS,YAAY;AAAA,IACvB,CAAC;AACD,QAAI,KAAK,MAAM,YAAY,YAAY,SAAS;AAC9C,WAAK,KAAK,gBAAgB,KAAK,MAAM,OAAO;AAC5C,WAAK,KAAK,WAAW;AAAA,QACnB,SAAS,KAAK,MAAM;AAAA,MACtB,CAAC;AAAA,IACH;AACA,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,2BAA2B;AACzB,UAAM,sBAAsB;AAAA,MAC1B,mBAAmB,OAAM,QAAO;AAC9B,YAAI,CAAC,IAAI,OAAQ,OAAM,UAAU,cAAc,wBAAwB;AACvE,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,IAAI,IAAI;AACR,YAAI,CAAC,QAAS,OAAM,UAAU,cAAc,gCAAgC;AAC5E,YAAI,CAAC,WAAW,QAAQ,WAAW,EAAG,OAAM,UAAU,cAAc,gCAAgC;AACpG,YAAI,CAAC,eAAgB,OAAM,UAAU,cAAc,uCAAuC;AAC1F,aAAK,SAAS;AAAA,UACZ,gBAAgB,iBAAiB;AAAA,UACjC;AAAA,UACA,SAAS,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,WAAW;AAAA,UACnG,aAAa,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,SAAS;AAAA,UACrG,aAAa;AAAA,UACb,WAAW,QAAQ,CAAC;AAAA,UACpB,mBAAmB,sBAAsB,QAAQ,sBAAsB,SAAS,SAAS,kBAAkB,CAAC,MAAM;AAAA,UAClH,WAAW,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,aAAa;AAAA,UACvG,OAAO,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,CAAC,MAAM;AAAA,QAC7E,CAAC;AAAA,MACH;AAAA,MACA,mBAAmB,OAAM,QAAO;AAC9B,YAAI,CAAC,IAAI,OAAQ,OAAM,UAAU,cAAc,wBAAwB;AACvE,YAAI,CAAC,IAAI,OAAO,QAAS,OAAM,UAAU,cAAc,iBAAiB;AACxE,cAAM,KAAK,YAAY,IAAI,MAAM;AAAA,MACnC;AAAA,IACF;AACA,UAAM,wBAAwB,4BAA4B,mBAAmB;AAC7E,WAAO;AAAA,EACT;AAAA,EACA,uBAAuB;AACrB,UAAM,kBAAkB;AAAA,MACtB,kBAAkB,OAAM,QAAO;AAC7B,YAAI,CAAC,IAAI,OAAQ,OAAM,UAAU,cAAc,wBAAwB;AACvE,YAAI,CAAC,IAAI,OAAO,WAAY,OAAM,UAAU,cAAc,oBAAoB;AAC9E,cAAM;AAAA,UACJ;AAAA,QACF,IAAI,IAAI;AACR,cAAM,KAAK,cAAc;AAAA,UACvB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO,wBAAwB,eAAe;AAAA,EAChD;AACF;AACA,4BAA4B;AAC5B,gBAAgB,0BAA0B,uBAAuB,OAAM,WAAU;AAC/E,QAAM,kBAAkB,IAAI,0BAA0B;AAAA,IACpD,QAAQ;AAAA,MACN,aAAa,OAAO;AAAA,IACtB;AAAA,EACF,CAAC;AACD,QAAM,gBAAgB,cAAc,OAAO,OAAO;AAClD,SAAO;AACT,CAAC;",
  "names": ["bs58", "import_bs58", "bs58", "nacl"]
}
