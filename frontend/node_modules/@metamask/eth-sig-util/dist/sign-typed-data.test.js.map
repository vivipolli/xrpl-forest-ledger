{"version":3,"file":"sign-typed-data.test.js","sourceRoot":"","sources":["../src/sign-typed-data.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Allow using snapshots in this file.\n/*\neslint jest/no-restricted-matchers: [\n  'error',\n  {\n    resolves: 'Use `expect(await promise)` instead.',\n    toBeFalsy: 'Avoid `toBeFalsy`',\n    toBeTruthy: 'Avoid `toBeTruthy`',\n  }\n]\n*/\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\nimport * as ethUtil from '@ethereumjs/util';\nimport Ajv from 'ajv';\n\nimport {\n  recoverTypedSignature,\n  signTypedData,\n  TypedDataUtils,\n  typedSignatureHash,\n  SignTypedDataVersion,\n  TYPED_MESSAGE_SCHEMA,\n} from './sign-typed-data';\n\nconst privateKey = Buffer.from(\n  '4af1bceebf7f3634ec3cff8a2c38e51178d5d4ce585c52d6043e5e2cc3418bb0',\n  'hex',\n);\n\n/**\n * Get a list of all Solidity types supported by EIP-712.\n *\n * @returns A list of all supported Solidity types.\n */\nfunction getEip712SolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map(\n    (_, index) => `int${(index + 1) * 8}`,\n  );\n  const uints = Array.from(new Array(32)).map(\n    (_, index) => `uint${(index + 1) * 8}`,\n  );\n  const bytes = Array.from(new Array(32)).map(\n    (_, index) => `bytes${index + 1}`,\n  );\n\n  return [...types, ...ints, ...uints, ...bytes];\n}\n\nconst eip712SolidityTypes = getEip712SolidityTypes();\n\n/**\n * Validate the given message with the typed message schema.\n *\n * @param typedMessage - The typed message to validate.\n * @returns Whether the message is valid.\n */\nfunction validateTypedMessageSchema(\n  typedMessage: Record<string, unknown>,\n): boolean {\n  const ajv = new Ajv();\n  const validate = ajv.compile(TYPED_MESSAGE_SCHEMA);\n  return validate(typedMessage);\n}\n\ndescribe('TYPED_MESSAGE_SCHEMA', () => {\n  it('should match valid typed message', () => {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'object',\n      types: {\n        EIP712Domain: [],\n      },\n    };\n\n    expect(validateTypedMessageSchema(typedMessage)).toBe(true);\n  });\n\n  it('should allow custom types in addition to domain', () => {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Message',\n      types: {\n        EIP712Domain: [],\n        Message: [],\n      },\n    };\n\n    expect(validateTypedMessageSchema(typedMessage)).toBe(true);\n  });\n\n  eip712SolidityTypes.forEach((solidityType) => {\n    it(`should allow custom type to have type of '${solidityType}'`, () => {\n      const typedMessage = {\n        domain: {},\n        message: {},\n        primaryType: 'Message',\n        types: {\n          EIP712Domain: [],\n          Message: [{ name: 'data', type: solidityType }],\n        },\n      };\n\n      expect(validateTypedMessageSchema(typedMessage)).toBe(true);\n    });\n  });\n\n  it('should allow custom type to have a custom type', () => {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Message',\n      types: {\n        CustomValue: [{ name: 'value', type: 'string' }],\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'CustomValue' }],\n      },\n    };\n\n    expect(validateTypedMessageSchema(typedMessage)).toBe(true);\n  });\n\n  const invalidStrings = [undefined, null, 0, 1, [], {}];\n\n  for (const invalidString of invalidStrings) {\n    it(`should disallow a primary type with value '${invalidString}'`, () => {\n      const typedMessage = {\n        domain: {},\n        message: {},\n        primaryType: invalidString,\n        types: {\n          EIP712Domain: [],\n        },\n      };\n\n      expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n    });\n  }\n\n  const invalidObjects = [undefined, null, 0, 1, [], '', 'test'];\n  for (const invalidObject of invalidObjects) {\n    it(`should disallow a typed message with value'${invalidObject}'`, () => {\n      expect(validateTypedMessageSchema(invalidObject as any)).toBe(false);\n    });\n\n    it(`should disallow a domain with value '${invalidObject}'`, () => {\n      const typedMessage = {\n        domain: invalidObject,\n        message: {},\n        primaryType: 'object',\n        types: {\n          EIP712Domain: [],\n        },\n      };\n\n      expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n    });\n\n    it(`should disallow a message with value '${invalidObject}'`, () => {\n      const typedMessage = {\n        domain: {},\n        message: invalidObject,\n        primaryType: 'object',\n        types: {\n          EIP712Domain: [],\n        },\n      };\n\n      expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n    });\n\n    it(`should disallow types with value '${invalidObject}'`, () => {\n      const typedMessage = {\n        domain: {},\n        message: {},\n        primaryType: 'object',\n        types: invalidObject,\n      };\n\n      expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n    });\n  }\n\n  it('should require custom type properties to have a name', () => {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Message',\n      types: {\n        EIP712Domain: [],\n        Message: [{ type: 'string' }],\n      },\n    };\n\n    expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n  });\n\n  it('should require custom type properties to have a type', () => {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Message',\n      types: {\n        EIP712Domain: [],\n        Message: [{ name: 'name' }],\n      },\n    };\n\n    expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n  });\n\n  const invalidTypes = [undefined, null, 0, 1, [], {}];\n\n  for (const invalidType of invalidTypes) {\n    it(`should disallow a type of '${invalidType}'`, () => {\n      const typedMessage = {\n        domain: {},\n        message: {},\n        primaryType: 'Message',\n        types: {\n          EIP712Domain: [],\n          Message: [{ name: 'name', type: invalidType }],\n        },\n      };\n\n      expect(validateTypedMessageSchema(typedMessage)).toBe(false);\n    });\n  }\n});\n\nconst MAX_SAFE_INTEGER_AS_HEX = `0x${Number.MAX_SAFE_INTEGER.toString(16)}`; // 0x1fffffffffffff - contains an even number of characters (16)\nconst MAX_SAFE_INTEGER_PLUS_ONE_CHAR_AS_HEX = `0x${Number.MAX_SAFE_INTEGER.toString(\n  16,\n)}1`; // 0x1fffffffffffff1 or 144115188075855860 - contains an odd number of characters in hexadecimal format (17) and is greater than MAX_SAFE_INTEGER\n\n/*\n  we test both even and odd length hex values because Node's Buffer.from() method does not buffer hex numbers correctly\n so we conditionally prepend hexstrings with a zero before buffering them depending on whether the string contains an \n even or odd number of characters \n */\n\nconst encodeDataExamples = {\n  // dynamic types supported by EIP-712:\n  bytes: [\n    10,\n    '10',\n    '0x10', // even\n    '0x101', // odd\n    Buffer.from('10', 'utf8'),\n    '0xa22cb465000000000000000000000000a9079d872d10185b54c5db2c36cc978cbd3f72b70000000000000000000000000000000000000000000000000000000000000001', // even number of characters hex string with value greater than MAX_SAFE_INTEGER\n    MAX_SAFE_INTEGER_AS_HEX,\n    MAX_SAFE_INTEGER_PLUS_ONE_CHAR_AS_HEX,\n    '0x',\n    '0x0',\n  ],\n  string: [\n    'Hello!',\n    '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    '0xabcd', // even\n    '0xabcde', // odd\n    '😁',\n    10,\n    MAX_SAFE_INTEGER_AS_HEX,\n    MAX_SAFE_INTEGER_PLUS_ONE_CHAR_AS_HEX,\n  ],\n  // atomic types supported by EIP-712:\n  address: [\n    '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    '0x0', // odd\n    '0x10', // even\n    10,\n    'bBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    Number.MAX_SAFE_INTEGER,\n    MAX_SAFE_INTEGER_AS_HEX,\n    MAX_SAFE_INTEGER_PLUS_ONE_CHAR_AS_HEX,\n  ],\n  bool: [true, false, 'true', 'false', 0, 1, -1, Number.MAX_SAFE_INTEGER],\n  bytes1: [\n    '0x10', // even\n    '0x101', // odd\n    10,\n    0,\n    1,\n    -1,\n    Number.MAX_SAFE_INTEGER,\n    Buffer.from('10', 'utf8'),\n    MAX_SAFE_INTEGER_AS_HEX,\n    MAX_SAFE_INTEGER_PLUS_ONE_CHAR_AS_HEX,\n  ],\n  bytes32: [\n    '0x10', // even\n    '0x101', // odd\n    10,\n    0,\n    1,\n    -1,\n    Number.MAX_SAFE_INTEGER,\n    Buffer.from('10', 'utf8'),\n    MAX_SAFE_INTEGER_AS_HEX,\n    MAX_SAFE_INTEGER_PLUS_ONE_CHAR_AS_HEX,\n  ],\n  int8: [0, '0', '0x0', 255, -255],\n  int256: [0, '0', '0x0', Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],\n  uint8: [0, '0', '0x0', 255],\n  uint256: [0, '0', '0x0', Number.MAX_SAFE_INTEGER],\n  // atomic types not supported by EIP-712:\n  int: [0, '0', '0x0', Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER], // interpreted as `int256` by `ethereumjs-abi`\n  uint: [0, '0', '0x0', Number.MAX_SAFE_INTEGER], // interpreted as `uint256` by `ethereumjs-abi`\n  // `fixed` and `ufixed` types omitted because their encoding in `ethereumjs-abi` is very broken at the moment.\n  // `function` type omitted because it is not supported by `ethereumjs-abi`.\n};\n\nconst encodeDataErrorExamples = {\n  address: [\n    {\n      input: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB0',\n      errorMessage:\n        'Unable to encode value: Invalid address value. Expected address to be 20 bytes long, but received 21 bytes.',\n    },\n  ],\n  int8: [\n    {\n      input: '256',\n      errorMessage:\n        'Unable to encode value: Number \"256\" is out of range for type \"int8\".',\n    },\n  ],\n  uint: [{ input: -1, errorMessage: 'Value must be a non-negative bigint.' }],\n  uint8: [{ input: -1, errorMessage: 'Value must be a non-negative bigint.' }],\n  uint256: [\n    { input: -1, errorMessage: 'Value must be a non-negative bigint.' },\n  ],\n  bytes1: [\n    {\n      input: 'a',\n      errorMessage:\n        'An unexpected error occurred: Expected a bytes-like value, got \"a\".',\n    },\n    {\n      input: 'test',\n      errorMessage:\n        'An unexpected error occurred: Expected a bytes-like value, got \"test\".',\n    },\n  ],\n  bytes32: [\n    {\n      input: 'a',\n      errorMessage:\n        'An unexpected error occurred: Expected a bytes-like value, got \"a\".',\n    },\n    {\n      input: 'test',\n      errorMessage:\n        'An unexpected error occurred: Expected a bytes-like value, got \"test\".',\n    },\n  ],\n};\n\n// Union of all types from both sets of examples\nconst allExampleTypes = [\n  ...new Set(\n    Object.keys(encodeDataExamples).concat(\n      Object.keys(encodeDataErrorExamples),\n    ),\n  ),\n];\n\ndescribe('TypedDataUtils.encodeData', function () {\n  // The `TypedDataUtils.encodeData` function accepts most Solidity data types, as well as custom\n  // data types defined by the types provided. The supported Solidity data types are divided into\n  // two types: atomic and dynamic. Atomic types are of a fixed size (e.g. `int8`), whereas dynamic\n  // types can vary in size (e.g. strings, bytes). We also test arrays of each of these types.\n  //\n  // The tests below test all boundary conditions of each Solidity type. These tests are\n  // automatically constructed using the example data above (\"encodeDataExamples\" and\n  // \"encodeDataErrorExamples\"). The behaviour for `null` and `undefined` inputs does vary between\n  // atomic, dynamic, and custom types though, so each of these three categories is tested\n  // separately with `null` and `undefined` input. Lastly, there are more tests for various other\n  // edge cases.\n  //\n  // The behavior differs between V3 and V4, so each test has been run for each version. We also\n  // have a block of tests to verify that signatures that match between V3 and V4 remain identical,\n  // and that signatures that differ between V3 and V4 remain different.\n  //\n  // To make reading and maintaining these tests easier, the order will be the same throughout all\n  // 4 of these test suites. Here is a table showing that order, as well as the compatibility of\n  // each input type with V3 and V4 `encodeData`. The table also shows whether the signature is\n  // identical between versions in the cases where the input can be encoded in both versions.\n  //\n  // | Input type                                           | V3 | V4 | Matching Signatures |\n  // | ---------------------------------------------------- | -- | -- | ------------------- |\n  // | Auto-generated tests from the example data           | Y  | Y  | Y                   |\n  // | Arrays using the example data                        | N  | Y  |                     |\n  // | Custom type                                          | Y  | Y  | Y                   |\n  // | Recursive custom type                                | Y  | Y  | N                   |\n  // | Custom type array                                    | N  | Y  |                     |\n  // | Custom type with extra properties                    | Y  | Y  | Y                   |\n  // | Atomic type with `null` input                        | N  | N  |                     |\n  // | Atomic type with `undefined` input                   | Y  | N  |                     |\n  // | Dynamic type with `null` input                       | Y  | Y  | Y                   |\n  // | Dynamic type with `undefined` input                  | Y  | N  |                     |\n  // | Custom type with `null` input                        | N  | Y  |                     |\n  // | Custom type with `undefined` input                   | Y  | Y  | N                   |\n  // | Functions                                            | N  | N  |                     |\n  // | Unrecognized primary type                            | N  | N  |                     |\n  // | Unrecognized non-primary type                        | N  | N  |                     |\n  // | Extra type specified that isn't used by primary type | Y  | Y  | Y                   |\n  //\n  // Note that these tests should mirror the `TypedDataUtils.hashStruct` tests. The `hashStruct`\n  // function just calls `encodeData` and hashes the result.\n\n  describe('V3', function () {\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should encode \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(\n                TypedDataUtils.encodeData(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V3,\n                ).toString('hex'),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = encodeDataErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to encode \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(() =>\n                TypedDataUtils.encodeData(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V3,\n                ).toString('hex'),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          it(`should fail to encode array of all ${type} example data`, function () {\n            const types = {\n              Message: [{ name: 'data', type: `${type}[]` }],\n            };\n            const message = { data: inputs };\n            expect(() =>\n              TypedDataUtils.encodeData(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V3,\n              ).toString('hex'),\n            ).toThrow(\n              'Arrays are unimplemented in encodeData; use V4 extension',\n            );\n          });\n        });\n      }\n    });\n\n    it('should encode data with custom type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data with a recursive data type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to encode a custom type array', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string[]' }],\n      };\n      const message = { data: ['1', '2', '3'] };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('Arrays are unimplemented in encodeData; use V4 extension');\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalSignature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const signatureWithExtraProperties = TypedDataUtils.encodeData(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n\n      expect(originalSignature).toBe(signatureWithExtraProperties);\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: null,\n      };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\".',\n      );\n    });\n\n    it('should encode data with an atomic property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: undefined,\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data with a dynamic property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data with a dynamic property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: undefined,\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when a custom type property is set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        to: null,\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow(/^Cannot read prop.+ null/u);\n    });\n\n    it('should encode data with a custom type property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: undefined,\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to encode a function', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'function' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to encode with a missing primary type definition', function () {\n      const types = {};\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('No type definition specified: Message');\n    });\n\n    it('should throw an error when trying to encode an unrecognized type', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'foo' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n\n    it('should encode data when given extraneous types', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n\n      expect(\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data when called unbound', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n      const primaryType = 'Message';\n      const { hashStruct } = TypedDataUtils;\n\n      expect(\n        hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n  });\n\n  describe('V4', function () {\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should encode \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(\n                TypedDataUtils.encodeData(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V4,\n                ).toString('hex'),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = encodeDataErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to encode \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(() =>\n                TypedDataUtils.encodeData(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V4,\n                ).toString('hex'),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          it(`should encode array of all ${type} example data`, function () {\n            const types = {\n              Message: [{ name: 'data', type: `${type}[]` }],\n            };\n            const message = { data: inputs };\n            expect(\n              TypedDataUtils.encodeData(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V4,\n              ).toString('hex'),\n            ).toMatchSnapshot();\n          });\n        });\n      }\n    });\n\n    it('should encode data with custom type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data with a recursive data type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data with a custom data type array', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address[]' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person[]' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: [\n            '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n            '0xDD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          ],\n        },\n        to: [\n          {\n            name: 'Bob',\n            wallet: ['0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'],\n          },\n        ],\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalSignature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const signatureWithExtraProperties = TypedDataUtils.encodeData(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(originalSignature).toBe(signatureWithExtraProperties);\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: null,\n      };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\".',\n      );\n    });\n\n    it('should throw an error when an atomic property is set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: undefined,\n      };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('missing value for field length of type int32');\n    });\n\n    it('should encode data with a dynamic property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when a dynamic property is set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: undefined,\n      };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('missing value for field contents of type string');\n    });\n\n    it('should encode data with a custom type property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        to: null,\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data with a custom type property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: undefined,\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to encode a function', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'function' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to encode with a missing primary type definition', function () {\n      const types = {};\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('No type definition specified: Message');\n    });\n\n    it('should throw an error when trying to encode an unrecognized type', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'foo' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n\n    it('should encode data when given extraneous types', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n\n      expect(\n        TypedDataUtils.encodeData(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should encode data when called unbound', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n      const primaryType = 'Message';\n      const { encodeData } = TypedDataUtils;\n\n      expect(\n        encodeData(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n  });\n\n  // This test suite covers all cases where data should be encoded identically\n  // on V3 and V4\n  describe('V3/V4 identical encodings', function () {\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should encode \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              const v3Signature = TypedDataUtils.encodeData(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V3,\n              ).toString('hex');\n              const v4Signature = TypedDataUtils.encodeData(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V4,\n              ).toString('hex');\n\n              expect(v3Signature).toBe(v4Signature);\n            });\n          }\n        });\n      }\n    });\n\n    it('should encode data with custom type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const v3Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).toBe(v4Signature);\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalV3Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const originalV4Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const v3signatureWithExtraProperties = TypedDataUtils.encodeData(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4signatureWithExtraProperties = TypedDataUtils.encodeData(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(originalV3Signature).toBe(originalV4Signature);\n      expect(v3signatureWithExtraProperties).toBe(\n        v4signatureWithExtraProperties,\n      );\n    });\n\n    it('should encode data with a dynamic property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      const v3Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).toBe(v4Signature);\n    });\n\n    it('should encode data when given extraneous types', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n\n      const v3Signature = TypedDataUtils.encodeData(\n        'Message',\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.encodeData(\n        'Message',\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).toBe(v4Signature);\n    });\n  });\n\n  // This test suite covers all cases where data should be encoded differently\n  // on V3 and V4\n  describe('V3/V4 encoding differences', () => {\n    // Recursive data structures are encoded differently because V4 encodes\n    // missing custom typed properties as 0 byte32 rather than omitting it,\n    // and all recursive data structures must include a missing custom typed\n    // property (the recursive one), or they'd be infinitely large or cyclic.\n    // And cyclic data structures are not supported.\n    it('should encode data with recursive data differently', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      const v3Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).not.toBe(v4Signature);\n    });\n\n    // Missing custom type properties are omitted in V3, but encoded as 0 (bytes32) in V4\n    it('should encode missing custom type properties differently', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const v3Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.encodeData(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).not.toBe(v4Signature);\n    });\n  });\n\n  it('should throw if passed an invalid version', () => {\n    const types = {\n      Message: [{ name: 'data', type: 'string' }],\n    };\n    const message = { data: 'Hello!' };\n    expect(() =>\n      TypedDataUtils.encodeData(\n        'Message',\n        message,\n        types,\n        'V0' as any,\n      ).toString('hex'),\n    ).toThrow('Invalid version');\n  });\n\n  it('should throw if passed a version that is not allowed', () => {\n    const types = {\n      Message: [{ name: 'data', type: 'string' }],\n    };\n    const message = { data: 'Hello!' };\n    expect(() =>\n      TypedDataUtils.encodeData(\n        'Message',\n        message,\n        types,\n        SignTypedDataVersion.V1 as any,\n      ).toString('hex'),\n    ).toThrow('SignTypedDataVersion not allowed');\n  });\n});\n\ndescribe('TypedDataUtils.hashStruct', function () {\n  // These tests mirror the `TypedDataUtils.encodeData` tests. The same inputs are expected.\n  // See the `encodeData` test comments for more information about these test cases.\n  describe('V3', function () {\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should hash \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(\n                TypedDataUtils.hashStruct(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V3,\n                ).toString('hex'),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = encodeDataErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to hash \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(() =>\n                TypedDataUtils.hashStruct(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V3,\n                ).toString('hex'),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          it(`should fail to hash array of all ${type} example data`, function () {\n            const types = {\n              Message: [{ name: 'data', type: `${type}[]` }],\n            };\n            const message = { data: inputs };\n            expect(() =>\n              TypedDataUtils.hashStruct(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V3,\n              ).toString('hex'),\n            ).toThrow(\n              'Arrays are unimplemented in encodeData; use V4 extension',\n            );\n          });\n        });\n      }\n    });\n\n    it('should hash data with custom type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data with a recursive data type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to hash a custom type array', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string[]' }],\n      };\n      const message = { data: ['1', '2', '3'] };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('Arrays are unimplemented in encodeData; use V4 extension');\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalSignature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const signatureWithExtraProperties = TypedDataUtils.hashStruct(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n\n      expect(originalSignature).toBe(signatureWithExtraProperties);\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: null,\n      };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\".',\n      );\n    });\n\n    it('should hash data with an atomic property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: undefined,\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data with a dynamic property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data with a dynamic property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: undefined,\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when a custom type property is set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        to: null,\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow(/^Cannot read prop.+ null/u);\n    });\n\n    it('should hash data with a custom type property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: undefined,\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to hash a function', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'function' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to hash with a missing primary type definition', function () {\n      const types = {};\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('No type definition specified: Message');\n    });\n\n    it('should throw an error when trying to hash an unrecognized type', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'foo' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n\n    it('should hash data when given extraneous types', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data when called unbound', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n      const primaryType = 'Message';\n      const { hashStruct } = TypedDataUtils;\n\n      expect(\n        hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V3,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n  });\n\n  describe('V4', function () {\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should hash \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(\n                TypedDataUtils.hashStruct(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V4,\n                ).toString('hex'),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = encodeDataErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to hash \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              expect(() =>\n                TypedDataUtils.hashStruct(\n                  'Message',\n                  message,\n                  types,\n                  SignTypedDataVersion.V4,\n                ).toString('hex'),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          it(`should hash array of all ${type} example data`, function () {\n            const types = {\n              Message: [{ name: 'data', type: `${type}[]` }],\n            };\n            const message = { data: inputs };\n            expect(\n              TypedDataUtils.hashStruct(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V4,\n              ).toString('hex'),\n            ).toMatchSnapshot();\n          });\n        });\n      }\n    });\n\n    it('should hash data with custom type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data with a recursive data type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data with a custom data type array', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address[]' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person[]' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: [\n            '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n            '0xDD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          ],\n        },\n        to: [\n          {\n            name: 'Bob',\n            wallet: ['0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'],\n          },\n        ],\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalSignature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const signatureWithExtraProperties = TypedDataUtils.hashStruct(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(originalSignature).toBe(signatureWithExtraProperties);\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: null,\n      };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\".',\n      );\n    });\n\n    it('should throw an error when an atomic property is set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: undefined,\n      };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('missing value for field length of type int32');\n    });\n\n    it('should hash data with a dynamic property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when a dynamic property is set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: undefined,\n      };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('missing value for field contents of type string');\n    });\n\n    it('should hash data with a custom type property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        to: null,\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data with a custom type property set to undefined', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: undefined,\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to hash a function', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'function' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to hash with a missing primary type definition', function () {\n      const types = {};\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('No type definition specified: Message');\n    });\n\n    it('should throw an error when trying to hash an unrecognized type', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'foo' }],\n      };\n      const message = { data: 'test' };\n\n      expect(() =>\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n\n    it('should hash data when given extraneous types', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n\n      expect(\n        TypedDataUtils.hashStruct(\n          'Message',\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n\n    it('should hash data when called unbound', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n      const primaryType = 'Message';\n      const { hashStruct } = TypedDataUtils;\n\n      expect(\n        hashStruct(\n          primaryType,\n          message,\n          types,\n          SignTypedDataVersion.V4,\n        ).toString('hex'),\n      ).toMatchSnapshot();\n    });\n  });\n\n  // This test suite covers all cases where data should be encoded identically\n  // on V3 and V4\n  describe('V3/V4 identical encodings', function () {\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should hash \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n\n              const v3Signature = TypedDataUtils.hashStruct(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V3,\n              ).toString('hex');\n              const v4Signature = TypedDataUtils.hashStruct(\n                'Message',\n                message,\n                types,\n                SignTypedDataVersion.V4,\n              ).toString('hex');\n\n              expect(v3Signature).toBe(v4Signature);\n            });\n          }\n        });\n      }\n    });\n\n    it('should hash data with custom type', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const v3Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).toBe(v4Signature);\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalV3Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const originalV4Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const v3signatureWithExtraProperties = TypedDataUtils.hashStruct(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4signatureWithExtraProperties = TypedDataUtils.hashStruct(\n        primaryType,\n        messageWithExtraProperties,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(originalV3Signature).toBe(originalV4Signature);\n      expect(v3signatureWithExtraProperties).toBe(\n        v4signatureWithExtraProperties,\n      );\n    });\n\n    it('should hash data with a dynamic property set to null', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      const v3Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).toBe(v4Signature);\n    });\n\n    it('should hash data when given extraneous types', function () {\n      const types = {\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n\n      const v3Signature = TypedDataUtils.hashStruct(\n        'Message',\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.hashStruct(\n        'Message',\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).toBe(v4Signature);\n    });\n  });\n\n  // This test suite covers all cases where data should be encoded differently\n  // on V3 and V4\n  describe('V3/V4 encoding differences', () => {\n    // Recursive data structures are encoded differently because V4 encodes\n    // missing custom typed properties as 0 byte32 rather than omitting it,\n    // and all recursive data structures must include a missing custom typed\n    // property (the recursive one), or they'd be infinitely large or cyclic.\n    // And cyclic data structures are not supported.\n    it('should hash data with recursive data differently', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      const v3Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).not.toBe(v4Signature);\n    });\n\n    // Missing custom type properties are omitted in V3, but encoded as 0 (bytes32) in V4\n    it('should hash missing custom type properties differently', function () {\n      const types = {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const v3Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V3,\n      ).toString('hex');\n      const v4Signature = TypedDataUtils.hashStruct(\n        primaryType,\n        message,\n        types,\n        SignTypedDataVersion.V4,\n      ).toString('hex');\n\n      expect(v3Signature).not.toBe(v4Signature);\n    });\n  });\n\n  it('should throw if passed an invalid version', () => {\n    const types = {\n      Message: [{ name: 'data', type: 'string' }],\n    };\n    const message = { data: 'Hello!' };\n    expect(() =>\n      TypedDataUtils.hashStruct(\n        'Message',\n        message,\n        types,\n        'V0' as any,\n      ).toString('hex'),\n    ).toThrow('Invalid version');\n  });\n\n  it('should throw if passed a version that is not allowed', () => {\n    const types = {\n      Message: [{ name: 'data', type: 'string' }],\n    };\n    const message = { data: 'Hello!' };\n    expect(() =>\n      TypedDataUtils.hashStruct(\n        'Message',\n        message,\n        types,\n        SignTypedDataVersion.V1 as any,\n      ).toString('hex'),\n    ).toThrow('SignTypedDataVersion not allowed');\n  });\n});\n\ndescribe('TypedDataUtils.encodeType', () => {\n  // Note that these tests should mirror the `TypedDataUtils.hashType` tests. The `hashType`\n  // function just calls `encodeType` and hashes the result.\n  it('should encode simple type', () => {\n    const types = {\n      Person: [{ name: 'name', type: 'string' }],\n    };\n    const primaryType = 'Person';\n\n    expect(TypedDataUtils.encodeType(primaryType, types)).toMatchInlineSnapshot(\n      `\"Person(string name)\"`,\n    );\n  });\n\n  it('should encode complex type', () => {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person[]' },\n        { name: 'contents', type: 'string' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(TypedDataUtils.encodeType(primaryType, types)).toMatchInlineSnapshot(\n      `\"Mail(Person from,Person[] to,string contents)Person(string name,address wallet)\"`,\n    );\n  });\n\n  it('should encode recursive type', () => {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person' },\n        { name: 'contents', type: 'string' },\n        { name: 'replyTo', type: 'Mail' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(TypedDataUtils.encodeType(primaryType, types)).toMatchInlineSnapshot(\n      `\"Mail(Person from,Person to,string contents,Mail replyTo)Person(string name,address wallet)\"`,\n    );\n  });\n\n  it('should encode unrecognized non-primary types', () => {\n    const types = {\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person' },\n        { name: 'contents', type: 'string' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(TypedDataUtils.encodeType(primaryType, types)).toMatchInlineSnapshot(\n      `\"Mail(Person from,Person to,string contents)\"`,\n    );\n  });\n\n  it('should throw if primary type is missing', () => {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(() => TypedDataUtils.encodeType(primaryType, types)).toThrow(\n      'No type definition specified: Mail',\n    );\n  });\n\n  it('should encode type when called unbound', function () {\n    const types = {\n      Message: [{ name: 'data', type: 'string' }],\n    };\n    const primaryType = 'Message';\n    const { encodeType } = TypedDataUtils;\n\n    expect(encodeType(primaryType, types)).toMatchInlineSnapshot(\n      `\"Message(string data)\"`,\n    );\n  });\n});\n\ndescribe('TypedDataUtils.hashType', () => {\n  // These tests mirror the `TypedDataUtils.encodeType` tests. The same inputs are expected.\n  it('should hash simple type', () => {\n    const types = {\n      Person: [{ name: 'name', type: 'string' }],\n    };\n    const primaryType = 'Person';\n\n    expect(\n      TypedDataUtils.hashType(primaryType, types).toString('hex'),\n    ).toMatchInlineSnapshot(\n      `\"fcbb73369ebb221abfdc626fdec0be9ca48ad89ef757b9a76eb7b31ddd261338\"`,\n    );\n  });\n\n  it('should hash complex type', () => {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person[]' },\n        { name: 'contents', type: 'string' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(\n      TypedDataUtils.hashType(primaryType, types).toString('hex'),\n    ).toMatchInlineSnapshot(\n      `\"dd57d9596af52b430ced3d5b52d4e3d5dccfdf3e0572db1dcf526baad311fbd1\"`,\n    );\n  });\n\n  it('should hash recursive type', () => {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person' },\n        { name: 'contents', type: 'string' },\n        { name: 'replyTo', type: 'Mail' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(\n      TypedDataUtils.hashType(primaryType, types).toString('hex'),\n    ).toMatchInlineSnapshot(\n      `\"66658e9662034bcd21df657297dab8ba47f0ae05dd8aa253cc935d9aacfd9d10\"`,\n    );\n  });\n\n  it('should hash unrecognized non-primary types', () => {\n    const types = {\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person' },\n        { name: 'contents', type: 'string' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(\n      TypedDataUtils.hashType(primaryType, types).toString('hex'),\n    ).toMatchInlineSnapshot(\n      `\"c0aee50a43b64ca632347f993c5a39cbddcae6ae329a7a111357622dc88dc1fb\"`,\n    );\n  });\n\n  it('should throw if primary type is missing', () => {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(() =>\n      TypedDataUtils.hashType(primaryType, types).toString('hex'),\n    ).toThrow('No type definition specified: Mail');\n  });\n\n  it('should hash type when called unbound', function () {\n    const types = {\n      Message: [{ name: 'data', type: 'string' }],\n    };\n    const primaryType = 'Message';\n    const { hashType } = TypedDataUtils;\n\n    expect(hashType(primaryType, types).toString('hex')).toMatchInlineSnapshot(\n      `\"cddf41b07426e1a761f3da57e35474ae3deaa5b596306531f651c6dc1321e4fd\"`,\n    );\n  });\n});\n\ndescribe('TypedDataUtils.findTypeDependencies', () => {\n  it('should return type dependencies of a simple type', function () {\n    const types = {\n      Person: [{ name: 'name', type: 'string' }],\n    };\n    const primaryType = 'Person';\n\n    expect(\n      TypedDataUtils.findTypeDependencies(primaryType, types),\n    ).toStrictEqual(new Set(['Person']));\n  });\n\n  it('should return type dependencies of an array type', function () {\n    const types = {\n      Person: [{ name: 'name', type: 'string' }],\n    };\n    const primaryType = 'Person[]';\n\n    expect(\n      TypedDataUtils.findTypeDependencies(primaryType, types),\n    ).toStrictEqual(new Set(['Person']));\n  });\n\n  it('should return type dependencies of a complex type', function () {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person[]' },\n        { name: 'contents', type: 'string' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(\n      TypedDataUtils.findTypeDependencies(primaryType, types),\n    ).toStrictEqual(new Set(['Mail', 'Person']));\n  });\n\n  it('should return type dependencies of a recursive type', function () {\n    const types = {\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallet', type: 'address' },\n      ],\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person[]' },\n        { name: 'contents', type: 'string' },\n        { name: 'replyTo', type: 'Mail' },\n      ],\n    };\n    const primaryType = 'Mail';\n\n    expect(\n      TypedDataUtils.findTypeDependencies(primaryType, types),\n    ).toStrictEqual(new Set(['Mail', 'Person']));\n  });\n\n  it('should return empty set if primary type is missing', function () {\n    const primaryType = 'Person';\n\n    expect(TypedDataUtils.findTypeDependencies(primaryType, {})).toStrictEqual(\n      new Set(),\n    );\n  });\n\n  it('should return type dependencies when called unbound', function () {\n    const types = {\n      Person: [{ name: 'name', type: 'string' }],\n    };\n    const primaryType = 'Person';\n    const { findTypeDependencies } = TypedDataUtils;\n\n    expect(findTypeDependencies(primaryType, types)).toStrictEqual(\n      new Set(['Person']),\n    );\n  });\n\n  it('should throw when called with null input', function () {\n    const primaryType = null;\n\n    expect(() => {\n      TypedDataUtils.findTypeDependencies(primaryType as any as string, {});\n    }).toThrow('Invalid findTypeDependencies input null');\n  });\n\n  it('should throw when called with undefined input', function () {\n    const primaryType = undefined;\n\n    expect(() => {\n      TypedDataUtils.findTypeDependencies(primaryType as any as string, {});\n    }).toThrow('Invalid findTypeDependencies input undefined');\n  });\n});\n\ndescribe('TypedDataUtils.sanitizeData', function () {\n  it('should return correctly formatted data unchanged', function () {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Person' as const,\n      types: {\n        EIP712Domain: [{ name: 'name', type: 'string' }],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n      },\n    };\n\n    const sanitizedTypedMessage = TypedDataUtils.sanitizeData(typedMessage);\n\n    expect(sanitizedTypedMessage).toStrictEqual(typedMessage);\n  });\n\n  it(\"should add `EIP712Domain` to `types` if it's missing\", function () {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Person' as const,\n      types: {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n      },\n    };\n\n    const sanitizedTypedMessage = TypedDataUtils.sanitizeData(\n      typedMessage as any,\n    );\n\n    expect(sanitizedTypedMessage).toStrictEqual({\n      ...typedMessage,\n      types: { ...typedMessage.types, EIP712Domain: [] },\n    });\n  });\n\n  it('should sanitize empty object', function () {\n    const typedMessage = {};\n\n    const sanitizedTypedMessage = TypedDataUtils.sanitizeData(\n      typedMessage as any,\n    );\n\n    expect(sanitizedTypedMessage).toStrictEqual({});\n  });\n\n  it('should omit unrecognized properties', function () {\n    const expectedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Person' as const,\n      types: {\n        EIP712Domain: [{ name: 'name', type: 'string' }],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n      },\n    };\n    const typedMessage = { ...expectedMessage, extraStuff: 'Extra stuff' };\n\n    const sanitizedTypedMessage = TypedDataUtils.sanitizeData(typedMessage);\n\n    expect(sanitizedTypedMessage).toStrictEqual(expectedMessage);\n  });\n\n  it('should sanitize data when called unbound', function () {\n    const typedMessage = {\n      domain: {},\n      message: {},\n      primaryType: 'Person' as const,\n      types: {\n        EIP712Domain: [{ name: 'name', type: 'string' }],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n      },\n    };\n    const { sanitizeData } = TypedDataUtils;\n\n    const sanitizedTypedMessage = sanitizeData(typedMessage);\n\n    expect(sanitizedTypedMessage).toStrictEqual(typedMessage);\n  });\n});\n\ndescribe('TypedDataUtils.eip712Hash', function () {\n  describe('V3', function () {\n    it('should hash a minimal valid typed message', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        // This represents the most basic \"typed message\" that is valid according to our types.\n        // It's not a very useful message (it's totally empty), but it's complete according to the\n        // spec.\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('minimal typed message hash should be identical to minimal valid typed message hash', function () {\n      const minimalHash = TypedDataUtils.eip712Hash(\n        // This tests that when the mandatory fields `domain`, `message`, and `types.EIP712Domain`\n        // are omitted, the result is the same as if they were included but empty.\n        {\n          types: {},\n          primaryType: 'EIP712Domain',\n        } as any,\n        SignTypedDataVersion.V3,\n      );\n      const minimalValidHash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V3,\n      );\n\n      expect(minimalHash.toString('hex')).toBe(\n        minimalValidHash.toString('hex'),\n      );\n    });\n\n    it('should ignore extra top-level properties', function () {\n      const minimalValidHash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V3,\n      );\n      const extraPropertiesHash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n          extra: 'stuff',\n          moreExtra: 1,\n        } as any,\n        SignTypedDataVersion.V3,\n      );\n\n      expect(minimalValidHash.toString('hex')).toBe(\n        extraPropertiesHash.toString('hex'),\n      );\n    });\n\n    it('should hash a typed message with a domain separator that uses all fields', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {},\n        },\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should hash a typed message with extra domain seperator fields', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should hash a typed message with only custom domain seperator fields', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'customName',\n                type: 'string',\n              },\n              {\n                name: 'customVersion',\n                type: 'string',\n              },\n              {\n                name: 'customChainId',\n                type: 'uint256',\n              },\n              {\n                name: 'customVerifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'customSalt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            customName: 'example.metamask.io',\n            customVersion: '1',\n            customChainId: 1,\n            customVerifyingContract:\n              '0x0000000000000000000000000000000000000000',\n            customSalt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should hash a typed message with data', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'Message',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {\n            data: 'Hello!',\n          },\n        },\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should ignore message if the primary type is EIP712Domain', function () {\n      const hashWithMessage = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {\n            data: 'Hello!',\n          },\n        },\n        SignTypedDataVersion.V3,\n      );\n      const hashWithoutMessage = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {},\n        },\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hashWithMessage.toString('hex')).toBe(\n        hashWithoutMessage.toString('hex'),\n      );\n    });\n\n    it('should hash a minimal valid typed message when called unbound', function () {\n      const { eip712Hash } = TypedDataUtils;\n\n      const hash = eip712Hash(\n        // This represents the most basic \"typed message\" that is valid according to our types.\n        // It's not a very useful message (it's totally empty), but it's complete according to the\n        // spec.\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V3,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n  });\n\n  describe('V4', function () {\n    it('should hash a minimal valid typed message', function () {\n      // This represents the most basic \"typed message\" that is valid according to our types.\n      // It's not a very useful message (it's totally empty), but it's complete according to the\n      // spec.\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('minimal typed message hash should be identical to minimal valid typed message hash', function () {\n      // This tests that when the mandatory fields `domain`, `message`, and `types.EIP712Domain`\n      // are omitted, the result is the same as if they were included but empty.\n      const minimalHash = TypedDataUtils.eip712Hash(\n        {\n          types: {},\n          primaryType: 'EIP712Domain',\n        } as any,\n        SignTypedDataVersion.V4,\n      );\n      const minimalValidHash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V4,\n      );\n\n      expect(minimalHash.toString('hex')).toBe(\n        minimalValidHash.toString('hex'),\n      );\n    });\n\n    it('should ignore extra top-level properties', function () {\n      const minimalValidHash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V4,\n      );\n      const extraPropertiesHash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n          extra: 'stuff',\n          moreExtra: 1,\n        } as any,\n        SignTypedDataVersion.V4,\n      );\n\n      expect(minimalValidHash.toString('hex')).toBe(\n        extraPropertiesHash.toString('hex'),\n      );\n    });\n\n    it('should hash a typed message with a domain separator that uses all fields.', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {},\n        },\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should hash a typed message with extra domain seperator fields', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should hash a typed message with only custom domain seperator fields', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'customName',\n                type: 'string',\n              },\n              {\n                name: 'customVersion',\n                type: 'string',\n              },\n              {\n                name: 'customChainId',\n                type: 'uint256',\n              },\n              {\n                name: 'customVerifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'customSalt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            customName: 'example.metamask.io',\n            customVersion: '1',\n            customChainId: 1,\n            customVerifyingContract:\n              '0x0000000000000000000000000000000000000000',\n            customSalt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should hash a typed message with data', function () {\n      const hash = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'Message',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {\n            data: 'Hello!',\n          },\n        },\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n\n    it('should ignore message if the primary type is EIP712Domain', function () {\n      const hashWithMessage = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {\n            data: 'Hello!',\n          },\n        },\n        SignTypedDataVersion.V4,\n      );\n      const hashWithoutMessage = TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {},\n        },\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hashWithMessage.toString('hex')).toBe(\n        hashWithoutMessage.toString('hex'),\n      );\n    });\n\n    it('should hash a minimal valid typed message when called unbound', function () {\n      const { eip712Hash } = TypedDataUtils;\n\n      // This represents the most basic \"typed message\" that is valid according to our types.\n      // It's not a very useful message (it's totally empty), but it's complete according to the\n      // spec.\n      const hash = eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V4,\n      );\n\n      expect(hash.toString('hex')).toMatchSnapshot();\n    });\n  });\n\n  it('should throw if passed an invalid version', () => {\n    expect(() =>\n      TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        'V0' as any,\n      ),\n    ).toThrow('Invalid version');\n  });\n\n  it('should throw if passed a version that is not allowed', () => {\n    expect(() =>\n      TypedDataUtils.eip712Hash(\n        {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        SignTypedDataVersion.V1 as any,\n      ),\n    ).toThrow('SignTypedDataVersion not allowed');\n  });\n});\n\n// Comments starting with \"V1:\" highlight differences relative to V3 and 4.\nconst signTypedDataV1Examples = {\n  // dynamic types supported by EIP-712:\n  bytes: [10, '10', '0x10', Buffer.from('10', 'utf8')],\n  string: [\n    'Hello!',\n    '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    '0xabcd',\n    '😁',\n  ],\n  // atomic types supported by EIP-712:\n  address: [\n    '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    // V1: No apparent maximum address length\n    '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbBbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    '0x0',\n    10,\n    Number.MAX_SAFE_INTEGER,\n  ],\n  bool: [true, false, 'true', 'false', 0, 1, -1, Number.MAX_SAFE_INTEGER],\n  bytes1: [\n    '0x10',\n    10,\n    0,\n    1,\n    -1,\n    Number.MAX_SAFE_INTEGER,\n    Buffer.from('10', 'utf8'),\n  ],\n  bytes32: [\n    '0x10',\n    10,\n    0,\n    1,\n    -1,\n    Number.MAX_SAFE_INTEGER,\n    Buffer.from('10', 'utf8'),\n  ],\n  int8: [0, '0', '0x0', 255, -255],\n  int256: [0, '0', '0x0', Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],\n  uint8: [0, '0', '0x0', 255, -255],\n  uint256: [\n    0,\n    '0',\n    '0x0',\n    Number.MAX_SAFE_INTEGER,\n    // V1: Negative unsigned integers\n    Number.MIN_SAFE_INTEGER,\n  ],\n  // atomic types not supported by EIP-712:\n  int: [0, '0', '0x0', Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER], // interpreted as `int256` by `ethereumjs-abi`\n  uint: [0, '0', '0x0', Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER], // interpreted as `uint256` by `ethereumjs-abi`\n  // `fixed` and `ufixed` types omitted because their encoding in `ethereumjs-abi` is very broken at the moment.\n  // `function` type omitted because it is not supported by `ethereumjs-abi`.\n};\n\nconst signTypedDataV1ErrorExamples = {\n  string: [\n    {\n      // V1: Does not accept numbers as strings (arguably correctly).\n      input: 10,\n      errorMessage: 'Value must be a string.',\n    },\n  ],\n  address: [\n    {\n      // V1: Unprefixed addresses are not accepted.\n      input: 'bBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      errorMessage:\n        'Expected a bytes-like value, got \"bBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\".',\n    },\n  ],\n  int8: [\n    {\n      input: '256',\n      errorMessage:\n        'Unable to encode value: Number \"256\" is out of range for type \"int8\".',\n    },\n  ],\n  bytes1: [\n    {\n      input: 'a',\n      errorMessage: 'Expected a bytes-like value, got \"a\".',\n    },\n    {\n      input: 'test',\n      errorMessage: 'Expected a bytes-like value, got \"test\".',\n    },\n  ],\n  bytes32: [\n    {\n      input: 'a',\n      errorMessage: 'Expected a bytes-like value, got \"a\".',\n    },\n    {\n      input: 'test',\n      errorMessage: 'Expected a bytes-like value, got \"test\".',\n    },\n  ],\n};\n\n// Union of all types from both sets of examples\nconst allSignTypedDataV1ExampleTypes = [\n  ...new Set(\n    Object.keys(encodeDataExamples).concat(\n      Object.keys(encodeDataErrorExamples),\n    ),\n  ),\n];\n\ndescribe('typedSignatureHash', function () {\n  for (const type of allSignTypedDataV1ExampleTypes) {\n    describe(`type \"${type}\"`, function () {\n      // Test all examples that do not crash\n      const inputs = signTypedDataV1Examples[type] || [];\n      for (const input of inputs) {\n        const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n        it(`should hash \"${input}\" (type \"${inputType}\")`, function () {\n          const typedData = [{ type, name: 'message', value: input }];\n\n          expect(typedSignatureHash(typedData)).toMatchSnapshot();\n        });\n      }\n\n      const errorInputs = signTypedDataV1ErrorExamples[type] || [];\n      for (const { input, errorMessage } of errorInputs) {\n        const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n        it(`should fail to hash \"${input}\" (type \"${inputType}\")`, function () {\n          const typedData = [{ type, name: 'message', value: input }];\n\n          expect(() => typedSignatureHash(typedData)).toThrow(errorMessage);\n        });\n      }\n    });\n  }\n\n  const invalidTypedMessages = [\n    {\n      input: [],\n      errorMessage: 'Expect argument to be non-empty array',\n      label: 'an empty array',\n    },\n    {\n      input: 42,\n      errorMessage: 'Expect argument to be non-empty array',\n      label: 'a number',\n    },\n    {\n      input: null,\n      errorMessage: \"Cannot use 'in' operator to search for 'length' in null\",\n      label: 'null',\n    },\n    {\n      input: undefined,\n      errorMessage: 'Expect argument to be non-empty array',\n      label: 'undefined',\n    },\n    {\n      input: [\n        {\n          type: 'jocker',\n          name: 'message',\n          value: 'Hi, Alice!',\n        },\n      ],\n      errorMessage:\n        'Unable to encode value: The type \"jocker\" is not supported.',\n      label: 'an unrecognized type',\n    },\n    {\n      input: [\n        {\n          name: 'message',\n          value: 'Hi, Alice!',\n        },\n      ],\n      errorMessage: 'Cannot read',\n      label: 'no type',\n    },\n    {\n      input: [\n        {\n          type: 'string',\n          value: 'Hi, Alice!',\n        },\n      ],\n      errorMessage: 'Expect argument to be non-empty array',\n      label: 'no name',\n    },\n  ];\n\n  for (const { input, errorMessage, label } of invalidTypedMessages) {\n    it(`should throw when given ${label}`, function () {\n      expect(() => typedSignatureHash(input as any)).toThrow(errorMessage);\n    });\n  }\n\n  it('should hash a message with multiple entries', function () {\n    const typedData = [\n      {\n        type: 'string',\n        name: 'message',\n        value: 'Hi, Alice!',\n      },\n      {\n        type: 'uint8',\n        name: 'value',\n        value: 10,\n      },\n    ];\n\n    expect(typedSignatureHash(typedData)).toMatchInlineSnapshot(\n      `\"0xf7ad23226db5c1c00ca0ca1468fd49c8f8bbc1489bc1c382de5adc557a69c229\"`,\n    );\n  });\n});\n\ndescribe('signTypedData', function () {\n  describe('V1', function () {\n    it('should throw when given an empty array', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Expect argument to be non-empty array');\n    });\n\n    describe('example data', function () {\n      for (const type of allSignTypedDataV1ExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = signTypedDataV1Examples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should sign \"${input}\" (type \"${inputType}\")`, function () {\n              expect(\n                signTypedData({\n                  privateKey,\n                  data: [{ name: 'data', type, value: input }],\n                  version: SignTypedDataVersion.V1,\n                }),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = signTypedDataV1ErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to sign \"${input}\" (type \"${inputType}\")`, function () {\n              expect(() =>\n                signTypedData({\n                  privateKey,\n                  data: [{ name: 'data', type, value: input }],\n                  version: SignTypedDataVersion.V1,\n                }),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          if (type === 'bytes') {\n            it(`should fail to sign array of all ${type} example data`, function () {\n              expect(() =>\n                signTypedData({\n                  privateKey,\n                  data: [{ name: 'data', type: `${type}[]`, value: inputs }],\n                  version: SignTypedDataVersion.V1,\n                }),\n              ).toThrow('Expected a bytes-like value, got \"10\".');\n            });\n          } else {\n            it(`should sign array of all ${type} example data`, function () {\n              expect(\n                signTypedData({\n                  privateKey,\n                  data: [{ name: 'data', type: `${type}[]`, value: inputs }],\n                  version: SignTypedDataVersion.V1,\n                }),\n              ).toMatchSnapshot();\n            });\n          }\n        });\n      }\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [{ name: 'data', type: 'int32', value: null }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\".',\n      );\n    });\n\n    it('should sign data with an atomic property set to undefined', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [{ name: 'data', type: 'int32', value: undefined }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a dynamic property set to null', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [{ name: 'data', type: 'string', value: null }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Value must be a string.');\n    });\n\n    it('should sign data with a dynamic property set to undefined', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [{ name: 'data', type: 'string', value: undefined }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to sign a function', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [\n            {\n              name: 'data',\n              type: 'function',\n              value: () => console.log(test),\n            },\n          ],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to sign an unrecognized type', function () {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [{ name: 'data', type: 'foo', value: 'test' }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n  });\n\n  describe('V3', function () {\n    // This first group of tests mirrors the `TypedDataUtils.eip712Hash` tests, because all of\n    // those test cases are relevant here as well.\n\n    it('should sign a minimal valid typed message', function () {\n      const signature = signTypedData({\n        privateKey,\n        // This represents the most basic \"typed message\" that is valid according to our types.\n        // It's not a very useful message (it's totally empty), but it's complete according to the\n        // spec.\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('minimal typed message signature should be identical to minimal valid typed message signature', function () {\n      const minimalSignature = signTypedData({\n        privateKey,\n        // This tests that when the mandatory fields `domain`, `message`, and `types.EIP712Domain`\n        // are omitted, the result is the same as if they were included but empty.\n        data: {\n          types: {},\n          primaryType: 'EIP712Domain',\n        } as any,\n        version: SignTypedDataVersion.V3,\n      });\n      const minimalValidSignature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(minimalSignature).toBe(minimalValidSignature);\n    });\n\n    it('should ignore extra data properties', function () {\n      const minimalValidSignature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        version: SignTypedDataVersion.V3,\n      });\n      const extraPropertiesSignature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n          extra: 'stuff',\n          moreExtra: 1,\n        } as any,\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(minimalValidSignature).toBe(extraPropertiesSignature);\n    });\n\n    it('should sign a typed message with a domain separator that uses all fields', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {},\n        },\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('should sign a typed message with extra domain seperator fields', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('should sign a typed message with only custom domain seperator fields', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'customName',\n                type: 'string',\n              },\n              {\n                name: 'customVersion',\n                type: 'string',\n              },\n              {\n                name: 'customChainId',\n                type: 'uint256',\n              },\n              {\n                name: 'customVerifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'customSalt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            customName: 'example.metamask.io',\n            customVersion: '1',\n            customChainId: 1,\n            customVerifyingContract:\n              '0x0000000000000000000000000000000000000000',\n            customSalt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('should sign a typed message with data', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'Message',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {\n            data: 'Hello!',\n          },\n        },\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    // This second group of tests mirrors the `TypedDataUtils.encodeData` tests, because all of\n    // those test cases are relevant here as well.\n\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should sign \"${input}\" (type \"${inputType}\")`, function () {\n              expect(\n                signTypedData({\n                  privateKey,\n                  data: {\n                    types: {\n                      EIP712Domain: [],\n                      Message: [{ name: 'data', type }],\n                    },\n                    primaryType: 'Message',\n                    domain: {},\n                    message: {\n                      data: input,\n                    },\n                  },\n                  version: SignTypedDataVersion.V3,\n                }),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = encodeDataErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to sign \"${input}\" (type \"${inputType}\")`, function () {\n              expect(() =>\n                signTypedData({\n                  privateKey,\n                  data: {\n                    types: {\n                      EIP712Domain: [],\n                      Message: [{ name: 'data', type }],\n                    },\n                    primaryType: 'Message',\n                    domain: {},\n                    message: {\n                      data: input,\n                    },\n                  },\n                  version: SignTypedDataVersion.V3,\n                }),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          it(`should fail to sign array of all ${type} example data`, function () {\n            expect(() =>\n              signTypedData({\n                privateKey,\n                data: {\n                  types: {\n                    EIP712Domain: [],\n                    Message: [{ name: 'data', type: `${type}[]` }],\n                  },\n                  primaryType: 'Message',\n                  domain: {},\n                  message: {\n                    data: inputs,\n                  },\n                },\n                version: SignTypedDataVersion.V3,\n              }),\n            ).toThrow(\n              'Arrays are unimplemented in encodeData; use V4 extension',\n            );\n          });\n        });\n      }\n    });\n\n    it('should sign data with custom type', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a recursive data type', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to sign a custom type array', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string[]' }],\n      };\n      const message = { data: ['1', '2', '3'] };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toThrow('Arrays are unimplemented in encodeData; use V4 extension');\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalSignature = signTypedData({\n        privateKey,\n        data: {\n          types,\n          primaryType,\n          domain: {},\n          message,\n        },\n        version: SignTypedDataVersion.V3,\n      });\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const signatureWithExtraProperties = signTypedData({\n        privateKey,\n        data: {\n          types,\n          primaryType,\n          domain: {},\n          message: messageWithExtraProperties,\n        },\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(originalSignature).toBe(signatureWithExtraProperties);\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: null,\n      };\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\".',\n      );\n    });\n\n    it('should sign data with an atomic property set to undefined', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: undefined,\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a dynamic property set to null', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a dynamic property set to undefined', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: undefined,\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when a custom type property is set to null', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        to: null,\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toThrow(/^Cannot read prop.+ null/u);\n    });\n\n    it('should sign data with a custom type property set to undefined', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: undefined,\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to sign a function', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'function' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to sign with a missing primary type definition', function () {\n      const types = {\n        EIP712Domain: [],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          } as any,\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toThrow('No type definition specified: Message');\n    });\n\n    it('should throw an error when trying to sign an unrecognized type', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'foo' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n\n    it('should sign data when given extraneous types', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n      const primaryType = 'Message';\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toMatchSnapshot();\n    });\n  });\n\n  describe('V4', function () {\n    // This first group of tests mirrors the `TypedDataUtils.eip712Hash` tests, because all of\n    // those test cases are relevant here as well.\n\n    it('should sign a minimal valid typed message', function () {\n      const signature = signTypedData({\n        privateKey,\n        // This represents the most basic \"typed message\" that is valid according to our types.\n        // It's not a very useful message (it's totally empty), but it's complete according to the\n        // spec.\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('minimal typed message signature should be identical to minimal valid typed message signature', function () {\n      const minimalSignature = signTypedData({\n        privateKey,\n        // This tests that when the mandatory fields `domain`, `message`, and `types.EIP712Domain`\n        // are omitted, the result is the same as if they were included but empty.\n        data: {\n          types: {},\n          primaryType: 'EIP712Domain',\n        } as any,\n        version: SignTypedDataVersion.V4,\n      });\n      const minimalValidSignature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(minimalSignature).toBe(minimalValidSignature);\n    });\n\n    it('should ignore extra data properties', function () {\n      const minimalValidSignature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n        },\n        version: SignTypedDataVersion.V4,\n      });\n      const extraPropertiesSignature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {},\n          message: {},\n          extra: 'stuff',\n          moreExtra: 1,\n        } as any,\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(minimalValidSignature).toBe(extraPropertiesSignature);\n    });\n\n    it('should sign a typed message with a domain separator that uses all fields', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {},\n        },\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('should sign a typed message with extra domain seperator fields', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('should sign a typed message with only custom domain seperator fields', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'customName',\n                type: 'string',\n              },\n              {\n                name: 'customVersion',\n                type: 'string',\n              },\n              {\n                name: 'customChainId',\n                type: 'uint256',\n              },\n              {\n                name: 'customVerifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'customSalt',\n                type: 'bytes32',\n              },\n              {\n                name: 'extraField',\n                type: 'string',\n              },\n            ],\n          },\n          primaryType: 'EIP712Domain',\n          domain: {\n            customName: 'example.metamask.io',\n            customVersion: '1',\n            customChainId: 1,\n            customVerifyingContract:\n              '0x0000000000000000000000000000000000000000',\n            customSalt: Buffer.from(new Int32Array([1, 2, 3])),\n            extraField: 'stuff',\n          },\n          message: {},\n        } as any,\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    it('should sign a typed message with data', function () {\n      const signature = signTypedData({\n        privateKey,\n        data: {\n          types: {\n            EIP712Domain: [\n              {\n                name: 'name',\n                type: 'string',\n              },\n              {\n                name: 'version',\n                type: 'string',\n              },\n              {\n                name: 'chainId',\n                type: 'uint256',\n              },\n              {\n                name: 'verifyingContract',\n                type: 'address',\n              },\n              {\n                name: 'salt',\n                type: 'bytes32',\n              },\n            ],\n            Message: [{ name: 'data', type: 'string' }],\n          },\n          primaryType: 'Message',\n          domain: {\n            name: 'example.metamask.io',\n            version: '1',\n            chainId: 1,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n            salt: Buffer.from(new Int32Array([1, 2, 3])),\n          },\n          message: {\n            data: 'Hello!',\n          },\n        },\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(signature).toMatchSnapshot();\n    });\n\n    // This second group of tests mirrors the `TypedDataUtils.encodeData` tests, because all of\n    // those test cases are relevant here as well.\n    describe('example data', function () {\n      for (const type of allExampleTypes) {\n        describe(`type \"${type}\"`, function () {\n          // Test all examples that do not crash\n          const inputs = encodeDataExamples[type] || [];\n          for (const input of inputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should sign \"${\n              input as string\n            }\" (type \"${inputType}\")`, function () {\n              const types = {\n                EIP712Domain: [],\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n              const primaryType = 'Message';\n\n              expect(\n                signTypedData({\n                  privateKey,\n                  data: {\n                    types,\n                    primaryType,\n                    domain: {},\n                    message,\n                  },\n                  version: SignTypedDataVersion.V4,\n                }),\n              ).toMatchSnapshot();\n            });\n          }\n\n          // Test all examples that crash\n          const errorInputs = encodeDataErrorExamples[type] || [];\n          for (const { input, errorMessage } of errorInputs) {\n            const inputType = input instanceof Buffer ? 'Buffer' : typeof input;\n            it(`should fail to sign \"${input}\" (type \"${inputType}\")`, function () {\n              const types = {\n                EIP712Domain: [],\n                Message: [{ name: 'data', type }],\n              };\n              const message = { data: input };\n              const primaryType = 'Message';\n\n              expect(() =>\n                signTypedData({\n                  privateKey,\n                  data: {\n                    types,\n                    primaryType,\n                    domain: {},\n                    message,\n                  },\n                  version: SignTypedDataVersion.V4,\n                }),\n              ).toThrow(errorMessage);\n            });\n          }\n\n          it(`should sign array of all ${type} example data`, function () {\n            const types = {\n              EIP712Domain: [],\n              Message: [{ name: 'data', type: `${type}[]` }],\n            };\n            const message = { data: inputs };\n            const primaryType = 'Message';\n            expect(\n              signTypedData({\n                privateKey,\n                data: {\n                  types,\n                  primaryType,\n                  domain: {},\n                  message,\n                },\n                version: SignTypedDataVersion.V4,\n              }),\n            ).toMatchSnapshot();\n          });\n        });\n      }\n    });\n\n    it('should sign data with custom type', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a recursive data type', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'replyTo', type: 'Mail' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n        replyTo: {\n          to: {\n            name: 'Cow',\n            wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          },\n          from: {\n            name: 'Bob',\n            wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n          },\n          contents: 'Hello!',\n        },\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a custom data type array', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address[]' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person[]' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: [\n            '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n            '0xDD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          ],\n        },\n        to: [\n          {\n            name: 'Bob',\n            wallet: ['0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'],\n          },\n        ],\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should ignore extra unspecified message properties', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      const originalSignature = signTypedData({\n        privateKey,\n        data: {\n          types,\n          primaryType,\n          domain: {},\n          message,\n        },\n        version: SignTypedDataVersion.V4,\n      });\n      const messageWithExtraProperties = { ...message, foo: 'bar' };\n      const signatureWithExtraProperties = signTypedData({\n        privateKey,\n        data: {\n          types,\n          primaryType,\n          domain: {},\n          message: messageWithExtraProperties,\n        },\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(originalSignature).toBe(signatureWithExtraProperties);\n    });\n\n    it('should throw an error when an atomic property is set to null', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: null,\n      };\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toThrow(\n        'Unable to encode value: Invalid number. Expected a valid number value, but received \"null\"',\n      );\n    });\n\n    it('should throw an error when an atomic property is set to undefined', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n          { name: 'length', type: 'int32' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello!',\n        length: undefined,\n      };\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toThrow('missing value for field length of type int32');\n    });\n\n    it('should sign data with a dynamic property set to null', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: null,\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when a dynamic property is set to undefined', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: undefined,\n      };\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toThrow('missing value for field contents of type string');\n    });\n\n    it('should sign data with a custom type property set to null', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        to: null,\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should sign data with a custom type property set to undefined', function () {\n      const types = {\n        EIP712Domain: [],\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      };\n      const primaryType = 'Mail';\n      const message = {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: undefined,\n        contents: 'Hello, Bob!',\n      };\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n\n    it('should throw an error when trying to encode a function', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'function' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toThrow('Unsupported or invalid type: \"function\"');\n    });\n\n    it('should throw an error when trying to sign with a missing primary type definition', function () {\n      const types = {\n        EIP712Domain: [],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          } as any,\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toThrow('No type definition specified: Message');\n    });\n\n    it('should throw an error when trying to sign an unrecognized type', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'foo' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message';\n\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toThrow('Unable to encode value: The type \"foo\" is not supported.');\n    });\n\n    it('should sign data when given extraneous types', function () {\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string' }],\n        Extra: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'Hello!' };\n      const primaryType = 'Message';\n\n      expect(\n        signTypedData({\n          privateKey,\n          data: {\n            types,\n            primaryType,\n            domain: {},\n            message,\n          },\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toMatchSnapshot();\n    });\n  });\n\n  describe('validation', () => {\n    it('should throw if passed an invalid version', () => {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: [{ name: 'data', type: 'string', value: 'Hello!' }],\n          version: 'V0' as any,\n        }),\n      ).toThrow('Invalid version');\n    });\n\n    it('should throw if passed null data', () => {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: null as any,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing data parameter');\n    });\n\n    it('should throw if passed undefined data', () => {\n      expect(() =>\n        signTypedData({\n          privateKey,\n          data: undefined as any,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing data parameter');\n    });\n\n    it('should throw if passed a null private key', () => {\n      expect(() =>\n        signTypedData({\n          privateKey: null as any,\n          data: [{ name: 'data', type: 'string', value: 'Hello!' }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing private key parameter');\n    });\n\n    it('should throw if passed an undefined private key', () => {\n      expect(() =>\n        signTypedData({\n          privateKey: undefined as any,\n          data: [{ name: 'data', type: 'string', value: 'Hello!' }],\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing private key parameter');\n    });\n  });\n});\n\ndescribe('recoverTypedSignature', function () {\n  describe('V1', function () {\n    // This is a signature of the message \"[{ name: 'message', type: 'string', value: 'Hi, Alice!' }]\"\n    // that was created using the private key in the top-level `privateKey` variable.\n    const exampleSignature =\n      '0x49e75d475d767de7fcc67f521e0d86590723d872e6111e51c393e8c1e2f21d032dfaf5833af158915f035db6af4f37bf2d5d29781cd81f28a44c5cb4b9d241531b';\n\n    it('should recover the address of the signer', function () {\n      const address = ethUtil.addHexPrefix(\n        ethUtil.privateToAddress(privateKey).toString('hex'),\n      );\n\n      expect(\n        recoverTypedSignature({\n          data: [{ name: 'message', type: 'string', value: 'Hi, Alice!' }],\n          signature: exampleSignature,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toBe(address);\n    });\n\n    it('should sign typed data and recover the address of the signer', function () {\n      const address = ethUtil.addHexPrefix(\n        ethUtil.privateToAddress(privateKey).toString('hex'),\n      );\n      const message = [\n        { name: 'message', type: 'string', value: 'Hi, Alice!' },\n      ];\n      const signature = signTypedData({\n        privateKey,\n        data: message,\n        version: SignTypedDataVersion.V1,\n      });\n\n      expect(\n        recoverTypedSignature({\n          data: message,\n          signature,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toBe(address);\n    });\n  });\n\n  describe('V3', function () {\n    // This is a signature of the message in the test below that was created using the private key\n    // in the top-level `privateKey` variable.\n    const exampleSignature =\n      '0xf6cda8eaf5137e8cc15d48d03a002b0512446e2a7acbc576c01cfbe40ad9345663ccda8884520d98dece9a8bfe38102851bdae7f69b3d8612b9808e6337801601b';\n\n    it('should recover the address of the signer', function () {\n      const address = ethUtil.addHexPrefix(\n        ethUtil.privateToAddress(privateKey).toString('hex'),\n      );\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message' as const;\n      const typedMessage = {\n        types,\n        primaryType,\n        domain: {},\n        message,\n      };\n\n      expect(\n        recoverTypedSignature({\n          data: typedMessage,\n          signature: exampleSignature,\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toBe(address);\n    });\n\n    it('should sign typed data and recover the address of the signer', function () {\n      const address = ethUtil.addHexPrefix(\n        ethUtil.privateToAddress(privateKey).toString('hex'),\n      );\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message' as const;\n      const typedMessage = {\n        types,\n        primaryType,\n        domain: {},\n        message,\n      };\n      const signature = signTypedData({\n        privateKey,\n        data: typedMessage,\n        version: SignTypedDataVersion.V3,\n      });\n\n      expect(\n        recoverTypedSignature({\n          data: typedMessage,\n          signature,\n          version: SignTypedDataVersion.V3,\n        }),\n      ).toBe(address);\n    });\n  });\n\n  describe('V4', function () {\n    // This is a signature of the message in the test below that was created using the private key\n    // in the top-level `privateKey` variable.\n    const exampleSignature =\n      '0xf6cda8eaf5137e8cc15d48d03a002b0512446e2a7acbc576c01cfbe40ad9345663ccda8884520d98dece9a8bfe38102851bdae7f69b3d8612b9808e6337801601b';\n\n    it('should recover the address of the signer', function () {\n      const address = ethUtil.addHexPrefix(\n        ethUtil.privateToAddress(privateKey).toString('hex'),\n      );\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message' as const;\n      const typedMessage = {\n        types,\n        primaryType,\n        domain: {},\n        message,\n      };\n\n      expect(\n        recoverTypedSignature({\n          data: typedMessage,\n          signature: exampleSignature,\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toBe(address);\n    });\n\n    it('should sign typed data and recover the address of the signer', function () {\n      const address = ethUtil.addHexPrefix(\n        ethUtil.privateToAddress(privateKey).toString('hex'),\n      );\n      const types = {\n        EIP712Domain: [],\n        Message: [{ name: 'data', type: 'string' }],\n      };\n      const message = { data: 'test' };\n      const primaryType = 'Message' as const;\n      const typedMessage = {\n        types,\n        primaryType,\n        domain: {},\n        message,\n      };\n      const signature = signTypedData({\n        privateKey,\n        data: typedMessage,\n        version: SignTypedDataVersion.V4,\n      });\n\n      expect(\n        recoverTypedSignature({\n          data: typedMessage,\n          signature,\n          version: SignTypedDataVersion.V4,\n        }),\n      ).toBe(address);\n    });\n  });\n\n  describe('validation', () => {\n    // This is a signature of the message \"[{ name: 'message', type: 'string', value: 'Hi, Alice!' }]\"\n    // that was created using the private key in the top-level `privateKey` variable.\n    const exampleSignature =\n      '0x49e75d475d767de7fcc67f521e0d86590723d872e6111e51c393e8c1e2f21d032dfaf5833af158915f035db6af4f37bf2d5d29781cd81f28a44c5cb4b9d241531b';\n\n    it('should throw if passed an invalid version', () => {\n      expect(() =>\n        recoverTypedSignature({\n          data: [{ name: 'message', type: 'string', value: 'Hi, Alice!' }],\n          signature: exampleSignature,\n          version: 'V0' as any,\n        }),\n      ).toThrow('Invalid version');\n    });\n\n    it('should throw if passed null data', () => {\n      expect(() =>\n        recoverTypedSignature({\n          data: null as any,\n          signature: exampleSignature,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing data parameter');\n    });\n\n    it('should throw if passed undefined data', () => {\n      expect(() =>\n        recoverTypedSignature({\n          data: undefined as any,\n          signature: exampleSignature,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing data parameter');\n    });\n\n    it('should throw if passed a null signature', () => {\n      expect(() =>\n        recoverTypedSignature({\n          data: [{ name: 'message', type: 'string', value: 'Hi, Alice!' }],\n          signature: null as any,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing signature parameter');\n    });\n\n    it('should throw if passed an undefined signature', () => {\n      expect(() =>\n        recoverTypedSignature({\n          data: [{ name: 'message', type: 'string', value: 'Hi, Alice!' }],\n          signature: undefined as any,\n          version: SignTypedDataVersion.V1,\n        }),\n      ).toThrow('Missing signature parameter');\n    });\n  });\n});\n"]}