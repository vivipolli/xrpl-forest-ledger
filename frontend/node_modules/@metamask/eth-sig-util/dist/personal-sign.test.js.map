{"version":3,"file":"personal-sign.test.js","sourceRoot":"","sources":["../src/personal-sign.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addHexPrefix,\n  privateToAddress,\n  privateToPublic,\n} from '@ethereumjs/util';\n\nimport {\n  extractPublicKey,\n  personalSign,\n  recoverPersonalSignature,\n} from './personal-sign';\n\nconst privateKey = Buffer.from(\n  '4af1bceebf7f3634ec3cff8a2c38e51178d5d4ce585c52d6043e5e2cc3418bb0',\n  'hex',\n);\n\ndescribe('personalSign', function () {\n  // This is a signature of the message \"Hello, world!\" that was created using the private key in\n  // the top-level `privateKey` variable.\n  const helloWorldSignature =\n    '0x90a938f7457df6e8f741264c32697fc52f9a8f867c52dd70713d9d2d472f2e415d9c94148991bbe1f4a1818d1dff09165782749c877f5cf1eff4ef126e55714d1c';\n  const helloWorldMessage = `0x${Buffer.from('Hello, world!').toString('hex')}`;\n\n  it('should sign a message', function () {\n    expect(personalSign({ privateKey, data: helloWorldMessage })).toBe(\n      helloWorldSignature,\n    );\n  });\n\n  it('should recover the address from a signature', function () {\n    const address = addHexPrefix(privateToAddress(privateKey).toString('hex'));\n\n    expect(\n      recoverPersonalSignature({\n        data: helloWorldMessage,\n        signature: helloWorldSignature,\n      }),\n    ).toBe(address);\n  });\n\n  it('should recover the public key from a signature', function () {\n    const publicKey = addHexPrefix(privateToPublic(privateKey).toString('hex'));\n\n    expect(\n      extractPublicKey({\n        data: helloWorldMessage,\n        signature: helloWorldSignature,\n      }),\n    ).toBe(publicKey);\n  });\n\n  it('should sign a message and recover the address of the signer', function () {\n    const address = addHexPrefix(privateToAddress(privateKey).toString('hex'));\n    const signature = personalSign({\n      privateKey,\n      data: helloWorldMessage,\n    });\n\n    expect(\n      recoverPersonalSignature({\n        data: helloWorldMessage,\n        signature,\n      }),\n    ).toBe(address);\n  });\n\n  it('should sign a message and recover the public key of the signer', function () {\n    const publicKey = addHexPrefix(privateToPublic(privateKey).toString('hex'));\n    const signature = personalSign({\n      privateKey,\n      data: helloWorldMessage,\n    });\n\n    expect(\n      extractPublicKey({\n        data: helloWorldMessage,\n        signature,\n      }),\n    ).toBe(publicKey);\n  });\n\n  // personal_sign was declared without an explicit set of test data\n  // so I made a script out of geth's internals to create this test data\n  // https://gist.github.com/kumavis/461d2c0e9a04ea0818e423bb77e3d260\n  const testCases = [\n    {\n      testLabel: 'personalSign - kumavis fml manual test I',\n      // \"hello world\"\n      message: '0x68656c6c6f20776f726c64',\n      signature:\n        '0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b',\n      addressHex: '0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb',\n      key: Buffer.from(\n        '6969696969696969696969696969696969696969696969696969696969696969',\n        'hex',\n      ),\n    },\n    {\n      testLabel: 'personalSign - kumavis fml manual test II',\n      // some random binary message from parity's test\n      message:\n        '0x0cc175b9c0f1b6a831c399e26977266192eb5ffee6ae2fec3ad71c777531578f',\n      signature:\n        '0x9ff8350cc7354b80740a3580d0e0fd4f1f02062040bc06b893d70906f8728bb5163837fd376bf77ce03b55e9bd092b32af60e86abce48f7b8d3539988ee5a9be1c',\n      addressHex: '0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb',\n      key: Buffer.from(\n        '6969696969696969696969696969696969696969696969696969696969696969',\n        'hex',\n      ),\n    },\n    {\n      testLabel: 'personalSign - kumavis fml manual test III',\n      // random binary message data and pk from parity's test\n      // https://github.com/ethcore/parity/blob/5369a129ae276d38f3490abb18c5093b338246e0/rpc/src/v1/tests/mocked/eth.rs#L301-L317\n      // note: their signature result is incorrect (last byte moved to front) due to a parity bug\n      message:\n        '0x0cc175b9c0f1b6a831c399e26977266192eb5ffee6ae2fec3ad71c777531578f',\n      signature:\n        '0xa2870db1d0c26ef93c7b72d2a0830fa6b841e0593f7186bc6c7cc317af8cf3a42fda03bd589a49949aa05db83300cdb553116274518dbe9d90c65d0213f4af491b',\n      addressHex: '0xe0da1edcea030875cd0f199d96eb70f6ab78faf2',\n      key: Buffer.from(\n        '4545454545454545454545454545454545454545454545454545454545454545',\n        'hex',\n      ),\n    },\n  ];\n\n  for (const { testLabel, message, signature, addressHex, key } of testCases) {\n    it(`${testLabel}`, function () {\n      const signed = personalSign({ privateKey: key, data: message });\n      expect(signed).toBe(signature);\n\n      const recovered = recoverPersonalSignature({\n        data: message,\n        signature,\n      });\n      expect(recovered).toBe(addressHex);\n    });\n  }\n\n  describe('validation', function () {\n    describe('personalSign', function () {\n      it('should throw if passed null data', function () {\n        expect(() =>\n          personalSign({\n            privateKey,\n            data: null,\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed undefined data', function () {\n        expect(() =>\n          personalSign({\n            privateKey,\n            data: undefined,\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed a null private key', function () {\n        expect(() =>\n          personalSign({\n            privateKey: null as any,\n            data: helloWorldMessage,\n          }),\n        ).toThrow('Missing privateKey parameter');\n      });\n\n      it('should throw if passed an undefined private key', function () {\n        expect(() =>\n          personalSign({\n            privateKey: undefined as any,\n            data: helloWorldMessage,\n          }),\n        ).toThrow('Missing privateKey parameter');\n      });\n    });\n\n    describe('recoverPersonalSignature', function () {\n      it('should throw if passed null data', function () {\n        expect(() =>\n          recoverPersonalSignature({\n            data: null,\n            signature: helloWorldSignature,\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed undefined data', function () {\n        expect(() =>\n          recoverPersonalSignature({\n            data: undefined,\n            signature: helloWorldSignature,\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed a null signature', function () {\n        expect(() =>\n          recoverPersonalSignature({\n            data: helloWorldMessage,\n            signature: null as any,\n          }),\n        ).toThrow('Missing signature parameter');\n      });\n\n      it('should throw if passed an undefined signature', function () {\n        expect(() =>\n          recoverPersonalSignature({\n            data: helloWorldMessage,\n            signature: undefined as any,\n          }),\n        ).toThrow('Missing signature parameter');\n      });\n    });\n\n    describe('extractPublicKey', function () {\n      it('should throw if passed null data', function () {\n        expect(() =>\n          extractPublicKey({\n            data: null,\n            signature: helloWorldSignature,\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed undefined data', function () {\n        expect(() =>\n          extractPublicKey({\n            data: undefined,\n            signature: helloWorldSignature,\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed a null signature', function () {\n        expect(() =>\n          extractPublicKey({\n            data: helloWorldMessage,\n            signature: null as any,\n          }),\n        ).toThrow('Missing signature parameter');\n      });\n\n      it('should throw if passed an undefined signature', function () {\n        expect(() =>\n          extractPublicKey({\n            data: helloWorldMessage,\n            signature: undefined as any,\n          }),\n        ).toThrow('Missing signature parameter');\n      });\n    });\n  });\n});\n"]}