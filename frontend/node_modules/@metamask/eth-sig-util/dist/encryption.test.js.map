{"version":3,"file":"encryption.test.js","sourceRoot":"","sources":["../src/encryption.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  decrypt,\n  decryptSafely,\n  encrypt,\n  encryptSafely,\n  getEncryptionPublicKey,\n} from './encryption';\n\ndescribe('encryption', function () {\n  const bob = {\n    ethereumPrivateKey:\n      '7e5374ec2ef0d91761a6e72fdf8f6ac665519bfdf6da0a2329cf0d804514b816',\n    encryptionPrivateKey: 'flN07C7w2Rdhpucv349qxmVRm/322gojKc8NgEUUuBY=',\n    encryptionPublicKey: 'C5YMNdqE4kLgxQhJO1MfuQcHP5hjVSXzamzd/TxlR0U=',\n  };\n\n  const secretMessage = 'My name is Satoshi Buterin';\n\n  const encryptedData = {\n    version: 'x25519-xsalsa20-poly1305',\n    nonce: '1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej',\n    ephemPublicKey: 'FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=',\n    ciphertext: 'f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy',\n  };\n\n  it(\"getting bob's encryptionPublicKey\", async function () {\n    const result = getEncryptionPublicKey(bob.ethereumPrivateKey);\n    expect(result).toBe(bob.encryptionPublicKey);\n  });\n\n  // encryption test\n  it(\"alice encrypts message with bob's encryptionPublicKey\", async function () {\n    const result = encrypt({\n      publicKey: bob.encryptionPublicKey,\n      data: secretMessage,\n      version: 'x25519-xsalsa20-poly1305',\n    });\n\n    expect(result.ciphertext).toHaveLength(56);\n    expect(result.ephemPublicKey).toHaveLength(44);\n    expect(result.nonce).toHaveLength(32);\n    expect(result.version).toBe('x25519-xsalsa20-poly1305');\n  });\n\n  // safe encryption test\n  it(\"alice encryptsSafely message with bob's encryptionPublicKey\", async function () {\n    const version = 'x25519-xsalsa20-poly1305';\n    const result = encryptSafely({\n      publicKey: bob.encryptionPublicKey,\n      data: secretMessage,\n      version,\n    });\n\n    expect(result.ciphertext).toHaveLength(2732);\n    expect(result.ephemPublicKey).toHaveLength(44);\n    expect(result.nonce).toHaveLength(32);\n    expect(result.version).toBe('x25519-xsalsa20-poly1305');\n  });\n\n  // safe decryption test\n  it('bob decryptSafely message that Alice encryptSafely for him', async function () {\n    const version = 'x25519-xsalsa20-poly1305';\n    const result = encryptSafely({\n      publicKey: bob.encryptionPublicKey,\n      data: secretMessage,\n      version,\n    });\n\n    const plaintext = decryptSafely({\n      encryptedData: result,\n      privateKey: bob.ethereumPrivateKey,\n    });\n    expect(plaintext).toBe(secretMessage);\n  });\n\n  // decryption test\n  it('bob decrypts message that Alice sent to him', function () {\n    const result = decrypt({\n      encryptedData,\n      privateKey: bob.ethereumPrivateKey,\n    });\n    expect(result).toBe(secretMessage);\n  });\n\n  it('decryption failed because version is wrong or missing', function () {\n    const badVersionData = {\n      version: 'x256k1-aes256cbc',\n      nonce: '1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej',\n      ephemPublicKey: 'FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=',\n      ciphertext: 'f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy',\n    };\n\n    expect(() =>\n      decrypt({\n        encryptedData: badVersionData,\n        privateKey: bob.ethereumPrivateKey,\n      }),\n    ).toThrow('Encryption type/version not supported.');\n  });\n\n  it('decryption failed because nonce is wrong or missing', function () {\n    // encrypted data\n    const badNonceData = {\n      version: 'x25519-xsalsa20-poly1305',\n      nonce: '',\n      ephemPublicKey: 'FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=',\n      ciphertext: 'f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy',\n    };\n\n    expect(() =>\n      decrypt({\n        encryptedData: badNonceData,\n        privateKey: bob.ethereumPrivateKey,\n      }),\n    ).toThrow('bad nonce size');\n  });\n\n  it('decryption failed because ephemPublicKey is wrong or missing', function () {\n    // encrypted data\n    const badEphemData = {\n      version: 'x25519-xsalsa20-poly1305',\n      nonce: '1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej',\n      ephemPublicKey: 'FFFF/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=',\n      ciphertext: 'f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy',\n    };\n\n    expect(() =>\n      decrypt({\n        encryptedData: badEphemData,\n        privateKey: bob.ethereumPrivateKey,\n      }),\n    ).toThrow('Decryption failed.');\n  });\n\n  it('decryption failed because cyphertext is wrong or missing', function () {\n    // encrypted data\n    const badEphemData = {\n      version: 'x25519-xsalsa20-poly1305',\n      nonce: '1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej',\n      ephemPublicKey: 'FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=',\n      ciphertext: 'ffffff/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy',\n    };\n\n    expect(() =>\n      decrypt({\n        encryptedData: badEphemData,\n        privateKey: bob.ethereumPrivateKey,\n      }),\n    ).toThrow('Decryption failed.');\n  });\n\n  describe('validation', function () {\n    describe('encrypt', function () {\n      it('should throw if passed null public key', function () {\n        expect(() =>\n          encrypt({\n            publicKey: null as any,\n            data: secretMessage,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing publicKey parameter');\n      });\n\n      it('should throw if passed undefined public key', function () {\n        expect(() =>\n          encrypt({\n            publicKey: undefined as any,\n            data: secretMessage,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing publicKey parameter');\n      });\n\n      it('should throw if passed null data', function () {\n        expect(() =>\n          encrypt({\n            publicKey: bob.encryptionPublicKey,\n            data: null,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed undefined data', function () {\n        expect(() =>\n          encrypt({\n            publicKey: bob.encryptionPublicKey,\n            data: undefined,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed null version', function () {\n        expect(() =>\n          encrypt({\n            publicKey: bob.encryptionPublicKey,\n            data: secretMessage,\n            version: null as any,\n          }),\n        ).toThrow('Missing version parameter');\n      });\n\n      it('should throw if passed undefined version', function () {\n        expect(() =>\n          encrypt({\n            publicKey: bob.encryptionPublicKey,\n            data: secretMessage,\n            version: undefined as any,\n          }),\n        ).toThrow('Missing version parameter');\n      });\n    });\n\n    describe('encryptSafely', function () {\n      it('should throw if passed null public key', function () {\n        expect(() =>\n          encryptSafely({\n            publicKey: null as any,\n            data: secretMessage,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing publicKey parameter');\n      });\n\n      it('should throw if passed undefined public key', function () {\n        expect(() =>\n          encryptSafely({\n            publicKey: undefined as any,\n            data: secretMessage,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing publicKey parameter');\n      });\n\n      it('should throw if passed null data', function () {\n        expect(() =>\n          encryptSafely({\n            publicKey: bob.encryptionPublicKey,\n            data: null,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed undefined data', function () {\n        expect(() =>\n          encryptSafely({\n            publicKey: bob.encryptionPublicKey,\n            data: undefined,\n            version: 'x25519-xsalsa20-poly1305',\n          }),\n        ).toThrow('Missing data parameter');\n      });\n\n      it('should throw if passed null version', function () {\n        expect(() =>\n          encryptSafely({\n            publicKey: bob.encryptionPublicKey,\n            data: secretMessage,\n            version: null as any,\n          }),\n        ).toThrow('Missing version parameter');\n      });\n\n      it('should throw if passed undefined version', function () {\n        expect(() =>\n          encryptSafely({\n            publicKey: bob.encryptionPublicKey,\n            data: secretMessage,\n            version: undefined as any,\n          }),\n        ).toThrow('Missing version parameter');\n      });\n    });\n\n    describe('decrypt', function () {\n      it('should throw if passed null encrypted data', function () {\n        expect(() =>\n          decrypt({\n            encryptedData: null as any,\n            privateKey: bob.ethereumPrivateKey,\n          }),\n        ).toThrow('Missing encryptedData parameter');\n      });\n\n      it('should throw if passed undefined encrypted data', function () {\n        expect(() =>\n          decrypt({\n            encryptedData: undefined as any,\n            privateKey: bob.ethereumPrivateKey,\n          }),\n        ).toThrow('Missing encryptedData parameter');\n      });\n\n      it('should throw if passed null private key', function () {\n        expect(() =>\n          decrypt({\n            encryptedData,\n            privateKey: null as any,\n          }),\n        ).toThrow('Missing privateKey parameter');\n      });\n\n      it('should throw if passed undefined private key', function () {\n        expect(() =>\n          decrypt({\n            encryptedData,\n            privateKey: undefined as any,\n          }),\n        ).toThrow('Missing privateKey parameter');\n      });\n    });\n\n    describe('decryptSafely', function () {\n      it('should throw if passed null encrypted data', function () {\n        expect(() =>\n          decryptSafely({\n            encryptedData: null as any,\n            privateKey: bob.ethereumPrivateKey,\n          }),\n        ).toThrow('Missing encryptedData parameter');\n      });\n\n      it('should throw if passed undefined encrypted data', function () {\n        expect(() =>\n          decryptSafely({\n            encryptedData: undefined as any,\n            privateKey: bob.ethereumPrivateKey,\n          }),\n        ).toThrow('Missing encryptedData parameter');\n      });\n\n      it('should throw if passed null private key', function () {\n        expect(() =>\n          decryptSafely({\n            encryptedData,\n            privateKey: null as any,\n          }),\n        ).toThrow('Missing privateKey parameter');\n      });\n\n      it('should throw if passed undefined private key', function () {\n        expect(() =>\n          decryptSafely({\n            encryptedData,\n            privateKey: undefined as any,\n          }),\n        ).toThrow('Missing privateKey parameter');\n      });\n    });\n  });\n});\n"]}