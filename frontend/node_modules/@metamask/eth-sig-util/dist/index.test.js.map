{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA6B;AAC7B,mCAA+C;AAE/C,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;CAmBtD,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,sCAAsC;IACtC,uEAAuE;IACvE,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as sigUtil from '.';\nimport { concatSig, normalize } from './utils';\n\ndescribe('exports', () => {\n  it('should have all expected exports', () => {\n    expect(Object.keys(sigUtil)).toMatchInlineSnapshot(`\nArray [\n  \"concatSig\",\n  \"normalize\",\n  \"personalSign\",\n  \"recoverPersonalSignature\",\n  \"extractPublicKey\",\n  \"SignTypedDataVersion\",\n  \"TYPED_MESSAGE_SCHEMA\",\n  \"TypedDataUtils\",\n  \"typedSignatureHash\",\n  \"signTypedData\",\n  \"recoverTypedSignature\",\n  \"encrypt\",\n  \"encryptSafely\",\n  \"decrypt\",\n  \"decryptSafely\",\n  \"getEncryptionPublicKey\",\n]\n`);\n  });\n\n  // I don't know why this is necessary.\n  // I tried using an 'istanbul ignore next' comment but it did not work.\n  it('should stop marking these functions as not covered', () => {\n    expect(sigUtil.concatSig).toBe(concatSig);\n    expect(sigUtil.normalize).toBe(normalize);\n  });\n});\n"]}